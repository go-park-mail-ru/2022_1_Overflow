// Code generated by MockGen. DO NOT EDIT.
// Source: OverflowBackend/internal/usecase (interfaces: UseCaseInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	config "OverflowBackend/internal/config"
	models "OverflowBackend/internal/models"
	repository "OverflowBackend/internal/repository"
	pkg "OverflowBackend/pkg"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCaseInterface is a mock of UseCaseInterface interface.
type MockUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseInterfaceMockRecorder
}

// MockUseCaseInterfaceMockRecorder is the mock recorder for MockUseCaseInterface.
type MockUseCaseInterfaceMockRecorder struct {
	mock *MockUseCaseInterface
}

// NewMockUseCaseInterface creates a new mock instance.
func NewMockUseCaseInterface(ctrl *gomock.Controller) *MockUseCaseInterface {
	mock := &MockUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseInterface) EXPECT() *MockUseCaseInterfaceMockRecorder {
	return m.recorder
}

// DeleteMail mocks base method.
func (m *MockUseCaseInterface) DeleteMail(arg0 *models.Session, arg1 int32) pkg.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMail", arg0, arg1)
	ret0, _ := ret[0].(pkg.JsonResponse)
	return ret0
}

// DeleteMail indicates an expected call of DeleteMail.
func (mr *MockUseCaseInterfaceMockRecorder) DeleteMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMail", reflect.TypeOf((*MockUseCaseInterface)(nil).DeleteMail), arg0, arg1)
}

// GetAvatar mocks base method.
func (m *MockUseCaseInterface) GetAvatar(arg0 string) (string, pkg.JsonResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(pkg.JsonResponse)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockUseCaseInterfaceMockRecorder) GetAvatar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockUseCaseInterface)(nil).GetAvatar), arg0)
}

// GetInfo mocks base method.
func (m *MockUseCaseInterface) GetInfo(arg0 *models.Session) ([]byte, pkg.JsonResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(pkg.JsonResponse)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUseCaseInterfaceMockRecorder) GetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUseCaseInterface)(nil).GetInfo), arg0)
}

// GetMail mocks base method.
func (m *MockUseCaseInterface) GetMail(arg0 *models.Session, arg1 int32) ([]byte, pkg.JsonResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMail", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(pkg.JsonResponse)
	return ret0, ret1
}

// GetMail indicates an expected call of GetMail.
func (mr *MockUseCaseInterfaceMockRecorder) GetMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMail", reflect.TypeOf((*MockUseCaseInterface)(nil).GetMail), arg0, arg1)
}

// Income mocks base method.
func (m *MockUseCaseInterface) Income(arg0 *models.Session) ([]byte, pkg.JsonResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Income", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(pkg.JsonResponse)
	return ret0, ret1
}

// Income indicates an expected call of Income.
func (mr *MockUseCaseInterfaceMockRecorder) Income(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Income", reflect.TypeOf((*MockUseCaseInterface)(nil).Income), arg0)
}

// Init mocks base method.
func (m *MockUseCaseInterface) Init(arg0 repository.DatabaseRepository, arg1 *config.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0, arg1)
}

// Init indicates an expected call of Init.
func (mr *MockUseCaseInterfaceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockUseCaseInterface)(nil).Init), arg0, arg1)
}

// Outcome mocks base method.
func (m *MockUseCaseInterface) Outcome(arg0 *models.Session) ([]byte, pkg.JsonResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Outcome", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(pkg.JsonResponse)
	return ret0, ret1
}

// Outcome indicates an expected call of Outcome.
func (mr *MockUseCaseInterfaceMockRecorder) Outcome(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Outcome", reflect.TypeOf((*MockUseCaseInterface)(nil).Outcome), arg0)
}

// ReadMail mocks base method.
func (m *MockUseCaseInterface) ReadMail(arg0 *models.Session, arg1 int32) pkg.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMail", arg0, arg1)
	ret0, _ := ret[0].(pkg.JsonResponse)
	return ret0
}

// ReadMail indicates an expected call of ReadMail.
func (mr *MockUseCaseInterfaceMockRecorder) ReadMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMail", reflect.TypeOf((*MockUseCaseInterface)(nil).ReadMail), arg0, arg1)
}

// SendMail mocks base method.
func (m *MockUseCaseInterface) SendMail(arg0 *models.Session, arg1 models.MailForm) pkg.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", arg0, arg1)
	ret0, _ := ret[0].(pkg.JsonResponse)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockUseCaseInterfaceMockRecorder) SendMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockUseCaseInterface)(nil).SendMail), arg0, arg1)
}

// SetAvatar mocks base method.
func (m *MockUseCaseInterface) SetAvatar(arg0 *models.Session, arg1 *models.Avatar) pkg.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvatar", arg0, arg1)
	ret0, _ := ret[0].(pkg.JsonResponse)
	return ret0
}

// SetAvatar indicates an expected call of SetAvatar.
func (mr *MockUseCaseInterfaceMockRecorder) SetAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockUseCaseInterface)(nil).SetAvatar), arg0, arg1)
}

// SetInfo mocks base method.
func (m *MockUseCaseInterface) SetInfo(arg0 *models.Session, arg1 *models.SettingsForm) pkg.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInfo", arg0, arg1)
	ret0, _ := ret[0].(pkg.JsonResponse)
	return ret0
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockUseCaseInterfaceMockRecorder) SetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockUseCaseInterface)(nil).SetInfo), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockUseCaseInterface) SignIn(arg0 models.SignInForm) pkg.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0)
	ret0, _ := ret[0].(pkg.JsonResponse)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUseCaseInterfaceMockRecorder) SignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUseCaseInterface)(nil).SignIn), arg0)
}

// SignUp mocks base method.
func (m *MockUseCaseInterface) SignUp(arg0 models.SignUpForm) pkg.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0)
	ret0, _ := ret[0].(pkg.JsonResponse)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUseCaseInterfaceMockRecorder) SignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUseCaseInterface)(nil).SignUp), arg0)
}
