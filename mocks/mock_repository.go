// Code generated by MockGen. DO NOT EDIT.
// Source: OverflowBackend/services/repository (interfaces: DatabaseRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	repository_proto "OverflowBackend/proto/repository_proto"
	utils_proto "OverflowBackend/proto/utils_proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseRepository is a mock of DatabaseRepository interface.
type MockDatabaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepositoryMockRecorder
}

// MockDatabaseRepositoryMockRecorder is the mock recorder for MockDatabaseRepository.
type MockDatabaseRepositoryMockRecorder struct {
	mock *MockDatabaseRepository
}

// NewMockDatabaseRepository creates a new mock instance.
func NewMockDatabaseRepository(ctrl *gomock.Controller) *MockDatabaseRepository {
	mock := &MockDatabaseRepository{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepository) EXPECT() *MockDatabaseRepositoryMockRecorder {
	return m.recorder
}

// AddFolder mocks base method.
func (m *MockDatabaseRepository) AddFolder(arg0 context.Context, arg1 *repository_proto.AddFolderRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockDatabaseRepositoryMockRecorder) AddFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockDatabaseRepository)(nil).AddFolder), arg0, arg1)
}

// AddMail mocks base method.
func (m *MockDatabaseRepository) AddMail(arg0 context.Context, arg1 *repository_proto.AddMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMail indicates an expected call of AddMail.
func (mr *MockDatabaseRepositoryMockRecorder) AddMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMail", reflect.TypeOf((*MockDatabaseRepository)(nil).AddMail), arg0, arg1)
}

// AddMailToFolder mocks base method.
func (m *MockDatabaseRepository) AddMailToFolder(arg0 context.Context, arg1 *repository_proto.AddMailToFolderRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMailToFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMailToFolder indicates an expected call of AddMailToFolder.
func (mr *MockDatabaseRepositoryMockRecorder) AddMailToFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMailToFolder", reflect.TypeOf((*MockDatabaseRepository)(nil).AddMailToFolder), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockDatabaseRepository) AddUser(arg0 context.Context, arg1 *repository_proto.AddUserRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseRepositoryMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabaseRepository)(nil).AddUser), arg0, arg1)
}

// ChangeFolderName mocks base method.
func (m *MockDatabaseRepository) ChangeFolderName(arg0 context.Context, arg1 *repository_proto.ChangeFolderNameRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFolderName", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeFolderName indicates an expected call of ChangeFolderName.
func (mr *MockDatabaseRepositoryMockRecorder) ChangeFolderName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFolderName", reflect.TypeOf((*MockDatabaseRepository)(nil).ChangeFolderName), arg0, arg1)
}

// ChangeUserFirstName mocks base method.
func (m *MockDatabaseRepository) ChangeUserFirstName(arg0 context.Context, arg1 *repository_proto.ChangeForm) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserFirstName", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserFirstName indicates an expected call of ChangeUserFirstName.
func (mr *MockDatabaseRepositoryMockRecorder) ChangeUserFirstName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserFirstName", reflect.TypeOf((*MockDatabaseRepository)(nil).ChangeUserFirstName), arg0, arg1)
}

// ChangeUserLastName mocks base method.
func (m *MockDatabaseRepository) ChangeUserLastName(arg0 context.Context, arg1 *repository_proto.ChangeForm) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserLastName", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserLastName indicates an expected call of ChangeUserLastName.
func (mr *MockDatabaseRepositoryMockRecorder) ChangeUserLastName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserLastName", reflect.TypeOf((*MockDatabaseRepository)(nil).ChangeUserLastName), arg0, arg1)
}

// ChangeUserPassword mocks base method.
func (m *MockDatabaseRepository) ChangeUserPassword(arg0 context.Context, arg1 *repository_proto.ChangeForm) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockDatabaseRepositoryMockRecorder) ChangeUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockDatabaseRepository)(nil).ChangeUserPassword), arg0, arg1)
}

// Create mocks base method.
func (m *MockDatabaseRepository) Create(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDatabaseRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatabaseRepository)(nil).Create), arg0)
}

// DeleteFolder mocks base method.
func (m *MockDatabaseRepository) DeleteFolder(arg0 context.Context, arg1 *repository_proto.DeleteFolderRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockDatabaseRepositoryMockRecorder) DeleteFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockDatabaseRepository)(nil).DeleteFolder), arg0, arg1)
}

// DeleteFolderMail mocks base method.
func (m *MockDatabaseRepository) DeleteFolderMail(arg0 context.Context, arg1 *repository_proto.DeleteFolderMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolderMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolderMail indicates an expected call of DeleteFolderMail.
func (mr *MockDatabaseRepositoryMockRecorder) DeleteFolderMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolderMail", reflect.TypeOf((*MockDatabaseRepository)(nil).DeleteFolderMail), arg0, arg1)
}

// DeleteMail mocks base method.
func (m *MockDatabaseRepository) DeleteMail(arg0 context.Context, arg1 *repository_proto.DeleteMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMail indicates an expected call of DeleteMail.
func (mr *MockDatabaseRepositoryMockRecorder) DeleteMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMail", reflect.TypeOf((*MockDatabaseRepository)(nil).DeleteMail), arg0, arg1)
}

// GetFolderById mocks base method.
func (m *MockDatabaseRepository) GetFolderById(arg0 context.Context, arg1 *repository_proto.GetFolderByIdRequest) (*repository_proto.ResponseFolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderById", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderById indicates an expected call of GetFolderById.
func (mr *MockDatabaseRepositoryMockRecorder) GetFolderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderById", reflect.TypeOf((*MockDatabaseRepository)(nil).GetFolderById), arg0, arg1)
}

// GetFolderByName mocks base method.
func (m *MockDatabaseRepository) GetFolderByName(arg0 context.Context, arg1 *repository_proto.GetFolderByNameRequest) (*repository_proto.ResponseFolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderByName", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderByName indicates an expected call of GetFolderByName.
func (mr *MockDatabaseRepositoryMockRecorder) GetFolderByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderByName", reflect.TypeOf((*MockDatabaseRepository)(nil).GetFolderByName), arg0, arg1)
}

// GetFolderMail mocks base method.
func (m *MockDatabaseRepository) GetFolderMail(arg0 context.Context, arg1 *repository_proto.GetFolderMailRequest) (*repository_proto.ResponseMails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderMail", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderMail indicates an expected call of GetFolderMail.
func (mr *MockDatabaseRepositoryMockRecorder) GetFolderMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderMail", reflect.TypeOf((*MockDatabaseRepository)(nil).GetFolderMail), arg0, arg1)
}

// GetFoldersByUser mocks base method.
func (m *MockDatabaseRepository) GetFoldersByUser(arg0 context.Context, arg1 *repository_proto.GetFoldersByUserRequest) (*repository_proto.ResponseFolders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoldersByUser", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseFolders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoldersByUser indicates an expected call of GetFoldersByUser.
func (mr *MockDatabaseRepositoryMockRecorder) GetFoldersByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersByUser", reflect.TypeOf((*MockDatabaseRepository)(nil).GetFoldersByUser), arg0, arg1)
}

// GetIncomeMails mocks base method.
func (m *MockDatabaseRepository) GetIncomeMails(arg0 context.Context, arg1 *repository_proto.GetIncomeMailsRequest) (*repository_proto.ResponseMails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeMails", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeMails indicates an expected call of GetIncomeMails.
func (mr *MockDatabaseRepositoryMockRecorder) GetIncomeMails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeMails", reflect.TypeOf((*MockDatabaseRepository)(nil).GetIncomeMails), arg0, arg1)
}

// GetMailInfoById mocks base method.
func (m *MockDatabaseRepository) GetMailInfoById(arg0 context.Context, arg1 *repository_proto.GetMailInfoByIdRequest) (*repository_proto.ResponseMail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailInfoById", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseMail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailInfoById indicates an expected call of GetMailInfoById.
func (mr *MockDatabaseRepositoryMockRecorder) GetMailInfoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailInfoById", reflect.TypeOf((*MockDatabaseRepository)(nil).GetMailInfoById), arg0, arg1)
}

// GetOutcomeMails mocks base method.
func (m *MockDatabaseRepository) GetOutcomeMails(arg0 context.Context, arg1 *repository_proto.GetOutcomeMailsRequest) (*repository_proto.ResponseMails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutcomeMails", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomeMails indicates an expected call of GetOutcomeMails.
func (mr *MockDatabaseRepositoryMockRecorder) GetOutcomeMails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomeMails", reflect.TypeOf((*MockDatabaseRepository)(nil).GetOutcomeMails), arg0, arg1)
}

// GetUserInfoById mocks base method.
func (m *MockDatabaseRepository) GetUserInfoById(arg0 context.Context, arg1 *repository_proto.GetUserInfoByIdRequest) (*repository_proto.ResponseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoById", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoById indicates an expected call of GetUserInfoById.
func (mr *MockDatabaseRepositoryMockRecorder) GetUserInfoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoById", reflect.TypeOf((*MockDatabaseRepository)(nil).GetUserInfoById), arg0, arg1)
}

// GetUserInfoByUsername mocks base method.
func (m *MockDatabaseRepository) GetUserInfoByUsername(arg0 context.Context, arg1 *repository_proto.GetUserInfoByUsernameRequest) (*repository_proto.ResponseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUsername", arg0, arg1)
	ret0, _ := ret[0].(*repository_proto.ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUsername indicates an expected call of GetUserInfoByUsername.
func (mr *MockDatabaseRepositoryMockRecorder) GetUserInfoByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUsername", reflect.TypeOf((*MockDatabaseRepository)(nil).GetUserInfoByUsername), arg0, arg1)
}

// ReadMail mocks base method.
func (m *MockDatabaseRepository) ReadMail(arg0 context.Context, arg1 *repository_proto.ReadMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMail indicates an expected call of ReadMail.
func (mr *MockDatabaseRepositoryMockRecorder) ReadMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMail", reflect.TypeOf((*MockDatabaseRepository)(nil).ReadMail), arg0, arg1)
}
