// Code generated by MockGen. DO NOT EDIT.
// Source: OverflowBackend/internal/repository (interfaces: DatabaseRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "OverflowBackend/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseRepository is a mock of DatabaseRepository interface.
type MockDatabaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepositoryMockRecorder
}

// MockDatabaseRepositoryMockRecorder is the mock recorder for MockDatabaseRepository.
type MockDatabaseRepositoryMockRecorder struct {
	mock *MockDatabaseRepository
}

// NewMockDatabaseRepository creates a new mock instance.
func NewMockDatabaseRepository(ctrl *gomock.Controller) *MockDatabaseRepository {
	mock := &MockDatabaseRepository{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepository) EXPECT() *MockDatabaseRepositoryMockRecorder {
	return m.recorder
}

// AddMail mocks base method.
func (m *MockDatabaseRepository) AddMail(arg0 models.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMail indicates an expected call of AddMail.
func (mr *MockDatabaseRepositoryMockRecorder) AddMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMail", reflect.TypeOf((*MockDatabaseRepository)(nil).AddMail), arg0)
}

// AddUser mocks base method.
func (m *MockDatabaseRepository) AddUser(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseRepositoryMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabaseRepository)(nil).AddUser), arg0)
}

// ChangeUserFirstName mocks base method.
func (m *MockDatabaseRepository) ChangeUserFirstName(arg0 models.User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserFirstName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserFirstName indicates an expected call of ChangeUserFirstName.
func (mr *MockDatabaseRepositoryMockRecorder) ChangeUserFirstName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserFirstName", reflect.TypeOf((*MockDatabaseRepository)(nil).ChangeUserFirstName), arg0, arg1)
}

// ChangeUserLastName mocks base method.
func (m *MockDatabaseRepository) ChangeUserLastName(arg0 models.User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserLastName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserLastName indicates an expected call of ChangeUserLastName.
func (mr *MockDatabaseRepositoryMockRecorder) ChangeUserLastName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserLastName", reflect.TypeOf((*MockDatabaseRepository)(nil).ChangeUserLastName), arg0, arg1)
}

// ChangeUserPassword mocks base method.
func (m *MockDatabaseRepository) ChangeUserPassword(arg0 models.User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockDatabaseRepositoryMockRecorder) ChangeUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockDatabaseRepository)(nil).ChangeUserPassword), arg0, arg1)
}

// Create mocks base method.
func (m *MockDatabaseRepository) Create(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDatabaseRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatabaseRepository)(nil).Create), arg0)
}

// DeleteMail mocks base method.
func (m *MockDatabaseRepository) DeleteMail(arg0 models.Mail, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMail indicates an expected call of DeleteMail.
func (mr *MockDatabaseRepositoryMockRecorder) DeleteMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMail", reflect.TypeOf((*MockDatabaseRepository)(nil).DeleteMail), arg0, arg1)
}

// GetIncomeMails mocks base method.
func (m *MockDatabaseRepository) GetIncomeMails(arg0 int32) ([]models.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeMails", arg0)
	ret0, _ := ret[0].([]models.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeMails indicates an expected call of GetIncomeMails.
func (mr *MockDatabaseRepositoryMockRecorder) GetIncomeMails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeMails", reflect.TypeOf((*MockDatabaseRepository)(nil).GetIncomeMails), arg0)
}

// GetMailInfoById mocks base method.
func (m *MockDatabaseRepository) GetMailInfoById(arg0 int32) (models.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailInfoById", arg0)
	ret0, _ := ret[0].(models.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailInfoById indicates an expected call of GetMailInfoById.
func (mr *MockDatabaseRepositoryMockRecorder) GetMailInfoById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailInfoById", reflect.TypeOf((*MockDatabaseRepository)(nil).GetMailInfoById), arg0)
}

// GetOutcomeMails mocks base method.
func (m *MockDatabaseRepository) GetOutcomeMails(arg0 int32) ([]models.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutcomeMails", arg0)
	ret0, _ := ret[0].([]models.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomeMails indicates an expected call of GetOutcomeMails.
func (mr *MockDatabaseRepositoryMockRecorder) GetOutcomeMails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomeMails", reflect.TypeOf((*MockDatabaseRepository)(nil).GetOutcomeMails), arg0)
}

// GetUserInfoById mocks base method.
func (m *MockDatabaseRepository) GetUserInfoById(arg0 int32) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoById", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoById indicates an expected call of GetUserInfoById.
func (mr *MockDatabaseRepositoryMockRecorder) GetUserInfoById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoById", reflect.TypeOf((*MockDatabaseRepository)(nil).GetUserInfoById), arg0)
}

// GetUserInfoByUsername mocks base method.
func (m *MockDatabaseRepository) GetUserInfoByUsername(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUsername", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUsername indicates an expected call of GetUserInfoByUsername.
func (mr *MockDatabaseRepositoryMockRecorder) GetUserInfoByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUsername", reflect.TypeOf((*MockDatabaseRepository)(nil).GetUserInfoByUsername), arg0)
}

// ReadMail mocks base method.
func (m *MockDatabaseRepository) ReadMail(arg0 models.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadMail indicates an expected call of ReadMail.
func (mr *MockDatabaseRepositoryMockRecorder) ReadMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMail", reflect.TypeOf((*MockDatabaseRepository)(nil).ReadMail), arg0)
}
