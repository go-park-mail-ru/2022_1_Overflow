// Code generated by MockGen. DO NOT EDIT.
// Source: OverflowBackend/services/folder_manager (interfaces: FolderManagerServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	folder_manager_proto "OverflowBackend/proto/folder_manager_proto"
	utils_proto "OverflowBackend/proto/utils_proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFolderManagerServiceInterface is a mock of FolderManagerServiceInterface interface.
type MockFolderManagerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFolderManagerServiceInterfaceMockRecorder
}

// MockFolderManagerServiceInterfaceMockRecorder is the mock recorder for MockFolderManagerServiceInterface.
type MockFolderManagerServiceInterfaceMockRecorder struct {
	mock *MockFolderManagerServiceInterface
}

// NewMockFolderManagerServiceInterface creates a new mock instance.
func NewMockFolderManagerServiceInterface(ctrl *gomock.Controller) *MockFolderManagerServiceInterface {
	mock := &MockFolderManagerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockFolderManagerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderManagerServiceInterface) EXPECT() *MockFolderManagerServiceInterfaceMockRecorder {
	return m.recorder
}

// AddFolder mocks base method.
func (m *MockFolderManagerServiceInterface) AddFolder(arg0 context.Context, arg1 *folder_manager_proto.AddFolderRequest) (*folder_manager_proto.ResponseFolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolder", arg0, arg1)
	ret0, _ := ret[0].(*folder_manager_proto.ResponseFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockFolderManagerServiceInterfaceMockRecorder) AddFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockFolderManagerServiceInterface)(nil).AddFolder), arg0, arg1)
}

// AddMailToFolder mocks base method.
func (m *MockFolderManagerServiceInterface) AddMailToFolder(arg0 context.Context, arg1 *folder_manager_proto.AddMailToFolderRequest) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMailToFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMailToFolder indicates an expected call of AddMailToFolder.
func (mr *MockFolderManagerServiceInterfaceMockRecorder) AddMailToFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMailToFolder", reflect.TypeOf((*MockFolderManagerServiceInterface)(nil).AddMailToFolder), arg0, arg1)
}

// ChangeFolder mocks base method.
func (m *MockFolderManagerServiceInterface) ChangeFolder(arg0 context.Context, arg1 *folder_manager_proto.ChangeFolderRequest) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeFolder indicates an expected call of ChangeFolder.
func (mr *MockFolderManagerServiceInterfaceMockRecorder) ChangeFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFolder", reflect.TypeOf((*MockFolderManagerServiceInterface)(nil).ChangeFolder), arg0, arg1)
}

// DeleteFolder mocks base method.
func (m *MockFolderManagerServiceInterface) DeleteFolder(arg0 context.Context, arg1 *folder_manager_proto.DeleteFolderRequest) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockFolderManagerServiceInterfaceMockRecorder) DeleteFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockFolderManagerServiceInterface)(nil).DeleteFolder), arg0, arg1)
}

// DeleteFolderMail mocks base method.
func (m *MockFolderManagerServiceInterface) DeleteFolderMail(arg0 context.Context, arg1 *folder_manager_proto.DeleteFolderMailRequest) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolderMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolderMail indicates an expected call of DeleteFolderMail.
func (mr *MockFolderManagerServiceInterfaceMockRecorder) DeleteFolderMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolderMail", reflect.TypeOf((*MockFolderManagerServiceInterface)(nil).DeleteFolderMail), arg0, arg1)
}

// ListFolder mocks base method.
func (m *MockFolderManagerServiceInterface) ListFolder(arg0 context.Context, arg1 *folder_manager_proto.ListFolderRequest) (*folder_manager_proto.ListFolderRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolder", arg0, arg1)
	ret0, _ := ret[0].(*folder_manager_proto.ListFolderRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolder indicates an expected call of ListFolder.
func (mr *MockFolderManagerServiceInterfaceMockRecorder) ListFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolder", reflect.TypeOf((*MockFolderManagerServiceInterface)(nil).ListFolder), arg0, arg1)
}

// ListFolders mocks base method.
func (m *MockFolderManagerServiceInterface) ListFolders(arg0 context.Context, arg1 *folder_manager_proto.ListFoldersRequest) (*folder_manager_proto.ResponseFolders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolders", arg0, arg1)
	ret0, _ := ret[0].(*folder_manager_proto.ResponseFolders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolders indicates an expected call of ListFolders.
func (mr *MockFolderManagerServiceInterfaceMockRecorder) ListFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolders", reflect.TypeOf((*MockFolderManagerServiceInterface)(nil).ListFolders), arg0, arg1)
}
