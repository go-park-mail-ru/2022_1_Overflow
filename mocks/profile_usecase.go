// Code generated by MockGen. DO NOT EDIT.
// Source: OverflowBackend/services/profile (interfaces: ProfileServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	config "OverflowBackend/internal/config"
	profile_proto "OverflowBackend/proto/profile_proto"
	repository_proto "OverflowBackend/proto/repository_proto"
	utils_proto "OverflowBackend/proto/utils_proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProfileServiceInterface is a mock of ProfileServiceInterface interface.
type MockProfileServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceInterfaceMockRecorder
}

// MockProfileServiceInterfaceMockRecorder is the mock recorder for MockProfileServiceInterface.
type MockProfileServiceInterfaceMockRecorder struct {
	mock *MockProfileServiceInterface
}

// NewMockProfileServiceInterface creates a new mock instance.
func NewMockProfileServiceInterface(ctrl *gomock.Controller) *MockProfileServiceInterface {
	mock := &MockProfileServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProfileServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceInterface) EXPECT() *MockProfileServiceInterfaceMockRecorder {
	return m.recorder
}

// GetAvatar mocks base method.
func (m *MockProfileServiceInterface) GetAvatar(arg0 *profile_proto.GetAvatarRequest) *profile_proto.GetAvatarResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", arg0)
	ret0, _ := ret[0].(*profile_proto.GetAvatarResponse)
	return ret0
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockProfileServiceInterfaceMockRecorder) GetAvatar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockProfileServiceInterface)(nil).GetAvatar), arg0)
}

// GetInfo mocks base method.
func (m *MockProfileServiceInterface) GetInfo(arg0 *utils_proto.Session) *profile_proto.GetInfoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0)
	ret0, _ := ret[0].(*profile_proto.GetInfoResponse)
	return ret0
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockProfileServiceInterfaceMockRecorder) GetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockProfileServiceInterface)(nil).GetInfo), arg0)
}

// Init mocks base method.
func (m *MockProfileServiceInterface) Init(arg0 *config.Config, arg1 repository_proto.DatabaseRepositoryClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0, arg1)
}

// Init indicates an expected call of Init.
func (mr *MockProfileServiceInterfaceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockProfileServiceInterface)(nil).Init), arg0, arg1)
}

// SetAvatar mocks base method.
func (m *MockProfileServiceInterface) SetAvatar(arg0 *profile_proto.SetAvatarRequest) *utils_proto.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvatar", arg0)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	return ret0
}

// SetAvatar indicates an expected call of SetAvatar.
func (mr *MockProfileServiceInterfaceMockRecorder) SetAvatar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockProfileServiceInterface)(nil).SetAvatar), arg0)
}

// SetInfo mocks base method.
func (m *MockProfileServiceInterface) SetInfo(arg0 *profile_proto.SetInfoRequest) *utils_proto.JsonResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInfo", arg0)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	return ret0
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockProfileServiceInterfaceMockRecorder) SetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockProfileServiceInterface)(nil).SetInfo), arg0)
}
