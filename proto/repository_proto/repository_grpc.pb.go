// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/repository.proto

package repository_proto

import (
	utils_proto "OverflowBackend/proto/utils_proto"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseRepositoryClient is the client API for DatabaseRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseRepositoryClient interface {
	GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameRequest, opts ...grpc.CallOption) (*ResponseUser, error)
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*ResponseUser, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeUserPassword(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeUserFirstName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeUserLastName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	GetIncomeMails(ctx context.Context, in *GetIncomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	GetOutcomeMails(ctx context.Context, in *GetOutcomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	AddMail(ctx context.Context, in *AddMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseExtendResponse, error)
	DeleteMail(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	GetMailInfoById(ctx context.Context, in *GetMailInfoByIdRequest, opts ...grpc.CallOption) (*ResponseMail, error)
	CountUnread(ctx context.Context, in *CountUnreadRequest, opts ...grpc.CallOption) (*ResponseCountUnread, error)
	GetFolderById(ctx context.Context, in *GetFolderByIdRequest, opts ...grpc.CallOption) (*ResponseFolder, error)
	GetFolderByName(ctx context.Context, in *GetFolderByNameRequest, opts ...grpc.CallOption) (*ResponseFolder, error)
	GetFoldersByUser(ctx context.Context, in *GetFoldersByUserRequest, opts ...grpc.CallOption) (*ResponseFolders, error)
	GetFolderMail(ctx context.Context, in *GetFolderMailRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	AddFolder(ctx context.Context, in *AddFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeFolderName(ctx context.Context, in *ChangeFolderNameRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderById(ctx context.Context, in *AddMailToFolderByIdRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderByObject(ctx context.Context, in *AddMailToFolderByObjectRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	DeleteFolderMail(ctx context.Context, in *DeleteFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	MoveFolderMail(ctx context.Context, in *MoveFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	AddAttachLink(ctx context.Context, in *AddAttachLinkRequest, opts ...grpc.CallOption) (*Nothing, error)
	CheckAttachLink(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*Nothing, error)
	ListAttaches(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*ResponseAttaches, error)
}

type databaseRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseRepositoryClient(cc grpc.ClientConnInterface) DatabaseRepositoryClient {
	return &databaseRepositoryClient{cc}
}

func (c *databaseRepositoryClient) GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetUserInfoByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeUserPassword(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeUserFirstName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeUserFirstName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeUserLastName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeUserLastName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetIncomeMails(ctx context.Context, in *GetIncomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetIncomeMails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetOutcomeMails(ctx context.Context, in *GetOutcomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetOutcomeMails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddMail(ctx context.Context, in *AddMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseExtendResponse, error) {
	out := new(utils_proto.DatabaseExtendResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) DeleteMail(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/DeleteMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ReadMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetMailInfoById(ctx context.Context, in *GetMailInfoByIdRequest, opts ...grpc.CallOption) (*ResponseMail, error) {
	out := new(ResponseMail)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetMailInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) CountUnread(ctx context.Context, in *CountUnreadRequest, opts ...grpc.CallOption) (*ResponseCountUnread, error) {
	out := new(ResponseCountUnread)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/CountUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFolderById(ctx context.Context, in *GetFolderByIdRequest, opts ...grpc.CallOption) (*ResponseFolder, error) {
	out := new(ResponseFolder)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFolderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFolderByName(ctx context.Context, in *GetFolderByNameRequest, opts ...grpc.CallOption) (*ResponseFolder, error) {
	out := new(ResponseFolder)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFolderByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFoldersByUser(ctx context.Context, in *GetFoldersByUserRequest, opts ...grpc.CallOption) (*ResponseFolders, error) {
	out := new(ResponseFolders)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFoldersByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFolderMail(ctx context.Context, in *GetFolderMailRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFolderMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/DeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddFolder(ctx context.Context, in *AddFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeFolderName(ctx context.Context, in *ChangeFolderNameRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeFolderName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddMailToFolderById(ctx context.Context, in *AddMailToFolderByIdRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddMailToFolderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddMailToFolderByObject(ctx context.Context, in *AddMailToFolderByObjectRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddMailToFolderByObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) DeleteFolderMail(ctx context.Context, in *DeleteFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/DeleteFolderMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) MoveFolderMail(ctx context.Context, in *MoveFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/MoveFolderMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddAttachLink(ctx context.Context, in *AddAttachLinkRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddAttachLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) CheckAttachLink(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/CheckAttachLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ListAttaches(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*ResponseAttaches, error) {
	out := new(ResponseAttaches)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ListAttaches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseRepositoryServer is the server API for DatabaseRepository service.
// All implementations must embed UnimplementedDatabaseRepositoryServer
// for forward compatibility
type DatabaseRepositoryServer interface {
	GetUserInfoByUsername(context.Context, *GetUserInfoByUsernameRequest) (*ResponseUser, error)
	GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*ResponseUser, error)
	AddUser(context.Context, *AddUserRequest) (*utils_proto.DatabaseResponse, error)
	ChangeUserPassword(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error)
	ChangeUserFirstName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error)
	ChangeUserLastName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error)
	GetIncomeMails(context.Context, *GetIncomeMailsRequest) (*ResponseMails, error)
	GetOutcomeMails(context.Context, *GetOutcomeMailsRequest) (*ResponseMails, error)
	AddMail(context.Context, *AddMailRequest) (*utils_proto.DatabaseExtendResponse, error)
	DeleteMail(context.Context, *DeleteMailRequest) (*utils_proto.DatabaseResponse, error)
	ReadMail(context.Context, *ReadMailRequest) (*utils_proto.DatabaseResponse, error)
	GetMailInfoById(context.Context, *GetMailInfoByIdRequest) (*ResponseMail, error)
	CountUnread(context.Context, *CountUnreadRequest) (*ResponseCountUnread, error)
	GetFolderById(context.Context, *GetFolderByIdRequest) (*ResponseFolder, error)
	GetFolderByName(context.Context, *GetFolderByNameRequest) (*ResponseFolder, error)
	GetFoldersByUser(context.Context, *GetFoldersByUserRequest) (*ResponseFolders, error)
	GetFolderMail(context.Context, *GetFolderMailRequest) (*ResponseMails, error)
	DeleteFolder(context.Context, *DeleteFolderRequest) (*utils_proto.DatabaseResponse, error)
	AddFolder(context.Context, *AddFolderRequest) (*utils_proto.DatabaseResponse, error)
	ChangeFolderName(context.Context, *ChangeFolderNameRequest) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderById(context.Context, *AddMailToFolderByIdRequest) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderByObject(context.Context, *AddMailToFolderByObjectRequest) (*utils_proto.DatabaseResponse, error)
	DeleteFolderMail(context.Context, *DeleteFolderMailRequest) (*utils_proto.DatabaseResponse, error)
	MoveFolderMail(context.Context, *MoveFolderMailRequest) (*utils_proto.DatabaseResponse, error)
	AddAttachLink(context.Context, *AddAttachLinkRequest) (*Nothing, error)
	CheckAttachLink(context.Context, *GetAttachRequest) (*Nothing, error)
	ListAttaches(context.Context, *GetAttachRequest) (*ResponseAttaches, error)
}

// UnimplementedDatabaseRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseRepositoryServer struct {
}

func (UnimplementedDatabaseRepositoryServer) GetUserInfoByUsername(context.Context, *GetUserInfoByUsernameRequest) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUsername not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedDatabaseRepositoryServer) AddUser(context.Context, *AddUserRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedDatabaseRepositoryServer) ChangeUserPassword(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedDatabaseRepositoryServer) ChangeUserFirstName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserFirstName not implemented")
}
func (UnimplementedDatabaseRepositoryServer) ChangeUserLastName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserLastName not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetIncomeMails(context.Context, *GetIncomeMailsRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeMails not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetOutcomeMails(context.Context, *GetOutcomeMailsRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutcomeMails not implemented")
}
func (UnimplementedDatabaseRepositoryServer) AddMail(context.Context, *AddMailRequest) (*utils_proto.DatabaseExtendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMail not implemented")
}
func (UnimplementedDatabaseRepositoryServer) DeleteMail(context.Context, *DeleteMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMail not implemented")
}
func (UnimplementedDatabaseRepositoryServer) ReadMail(context.Context, *ReadMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMail not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetMailInfoById(context.Context, *GetMailInfoByIdRequest) (*ResponseMail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailInfoById not implemented")
}
func (UnimplementedDatabaseRepositoryServer) CountUnread(context.Context, *CountUnreadRequest) (*ResponseCountUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUnread not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetFolderById(context.Context, *GetFolderByIdRequest) (*ResponseFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderById not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetFolderByName(context.Context, *GetFolderByNameRequest) (*ResponseFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderByName not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetFoldersByUser(context.Context, *GetFoldersByUserRequest) (*ResponseFolders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoldersByUser not implemented")
}
func (UnimplementedDatabaseRepositoryServer) GetFolderMail(context.Context, *GetFolderMailRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderMail not implemented")
}
func (UnimplementedDatabaseRepositoryServer) DeleteFolder(context.Context, *DeleteFolderRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedDatabaseRepositoryServer) AddFolder(context.Context, *AddFolderRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFolder not implemented")
}
func (UnimplementedDatabaseRepositoryServer) ChangeFolderName(context.Context, *ChangeFolderNameRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeFolderName not implemented")
}
func (UnimplementedDatabaseRepositoryServer) AddMailToFolderById(context.Context, *AddMailToFolderByIdRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMailToFolderById not implemented")
}
func (UnimplementedDatabaseRepositoryServer) AddMailToFolderByObject(context.Context, *AddMailToFolderByObjectRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMailToFolderByObject not implemented")
}
func (UnimplementedDatabaseRepositoryServer) DeleteFolderMail(context.Context, *DeleteFolderMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolderMail not implemented")
}
func (UnimplementedDatabaseRepositoryServer) MoveFolderMail(context.Context, *MoveFolderMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFolderMail not implemented")
}
func (UnimplementedDatabaseRepositoryServer) AddAttachLink(context.Context, *AddAttachLinkRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttachLink not implemented")
}
func (UnimplementedDatabaseRepositoryServer) CheckAttachLink(context.Context, *GetAttachRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAttachLink not implemented")
}
func (UnimplementedDatabaseRepositoryServer) ListAttaches(context.Context, *GetAttachRequest) (*ResponseAttaches, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttaches not implemented")
}
func (UnimplementedDatabaseRepositoryServer) mustEmbedUnimplementedDatabaseRepositoryServer() {}

// UnsafeDatabaseRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseRepositoryServer will
// result in compilation errors.
type UnsafeDatabaseRepositoryServer interface {
	mustEmbedUnimplementedDatabaseRepositoryServer()
}

func RegisterDatabaseRepositoryServer(s grpc.ServiceRegistrar, srv DatabaseRepositoryServer) {
	s.RegisterService(&DatabaseRepository_ServiceDesc, srv)
}

func _DatabaseRepository_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetUserInfoByUsername(ctx, req.(*GetUserInfoByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeUserPassword(ctx, req.(*ChangeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeUserFirstName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeUserFirstName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeUserFirstName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeUserFirstName(ctx, req.(*ChangeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeUserLastName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeUserLastName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeUserLastName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeUserLastName(ctx, req.(*ChangeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetIncomeMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeMailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetIncomeMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetIncomeMails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetIncomeMails(ctx, req.(*GetIncomeMailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetOutcomeMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutcomeMailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetOutcomeMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetOutcomeMails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetOutcomeMails(ctx, req.(*GetOutcomeMailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddMail(ctx, req.(*AddMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_DeleteMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).DeleteMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/DeleteMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).DeleteMail(ctx, req.(*DeleteMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ReadMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ReadMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ReadMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ReadMail(ctx, req.(*ReadMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetMailInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetMailInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetMailInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetMailInfoById(ctx, req.(*GetMailInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_CountUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).CountUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/CountUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).CountUnread(ctx, req.(*CountUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFolderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFolderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFolderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFolderById(ctx, req.(*GetFolderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFolderByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFolderByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFolderByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFolderByName(ctx, req.(*GetFolderByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFoldersByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoldersByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFoldersByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFoldersByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFoldersByUser(ctx, req.(*GetFoldersByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFolderMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFolderMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFolderMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFolderMail(ctx, req.(*GetFolderMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).DeleteFolder(ctx, req.(*DeleteFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddFolder(ctx, req.(*AddFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeFolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFolderNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeFolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeFolderName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeFolderName(ctx, req.(*ChangeFolderNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddMailToFolderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailToFolderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddMailToFolderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddMailToFolderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddMailToFolderById(ctx, req.(*AddMailToFolderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddMailToFolderByObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailToFolderByObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddMailToFolderByObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddMailToFolderByObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddMailToFolderByObject(ctx, req.(*AddMailToFolderByObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_DeleteFolderMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).DeleteFolderMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/DeleteFolderMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).DeleteFolderMail(ctx, req.(*DeleteFolderMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_MoveFolderMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFolderMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).MoveFolderMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/MoveFolderMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).MoveFolderMail(ctx, req.(*MoveFolderMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddAttachLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttachLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddAttachLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddAttachLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddAttachLink(ctx, req.(*AddAttachLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_CheckAttachLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).CheckAttachLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/CheckAttachLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).CheckAttachLink(ctx, req.(*GetAttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ListAttaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ListAttaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ListAttaches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ListAttaches(ctx, req.(*GetAttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseRepository_ServiceDesc is the grpc.ServiceDesc for DatabaseRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repository_proto.DatabaseRepository",
	HandlerType: (*DatabaseRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _DatabaseRepository_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _DatabaseRepository_GetUserInfoById_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _DatabaseRepository_AddUser_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _DatabaseRepository_ChangeUserPassword_Handler,
		},
		{
			MethodName: "ChangeUserFirstName",
			Handler:    _DatabaseRepository_ChangeUserFirstName_Handler,
		},
		{
			MethodName: "ChangeUserLastName",
			Handler:    _DatabaseRepository_ChangeUserLastName_Handler,
		},
		{
			MethodName: "GetIncomeMails",
			Handler:    _DatabaseRepository_GetIncomeMails_Handler,
		},
		{
			MethodName: "GetOutcomeMails",
			Handler:    _DatabaseRepository_GetOutcomeMails_Handler,
		},
		{
			MethodName: "AddMail",
			Handler:    _DatabaseRepository_AddMail_Handler,
		},
		{
			MethodName: "DeleteMail",
			Handler:    _DatabaseRepository_DeleteMail_Handler,
		},
		{
			MethodName: "ReadMail",
			Handler:    _DatabaseRepository_ReadMail_Handler,
		},
		{
			MethodName: "GetMailInfoById",
			Handler:    _DatabaseRepository_GetMailInfoById_Handler,
		},
		{
			MethodName: "CountUnread",
			Handler:    _DatabaseRepository_CountUnread_Handler,
		},
		{
			MethodName: "GetFolderById",
			Handler:    _DatabaseRepository_GetFolderById_Handler,
		},
		{
			MethodName: "GetFolderByName",
			Handler:    _DatabaseRepository_GetFolderByName_Handler,
		},
		{
			MethodName: "GetFoldersByUser",
			Handler:    _DatabaseRepository_GetFoldersByUser_Handler,
		},
		{
			MethodName: "GetFolderMail",
			Handler:    _DatabaseRepository_GetFolderMail_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _DatabaseRepository_DeleteFolder_Handler,
		},
		{
			MethodName: "AddFolder",
			Handler:    _DatabaseRepository_AddFolder_Handler,
		},
		{
			MethodName: "ChangeFolderName",
			Handler:    _DatabaseRepository_ChangeFolderName_Handler,
		},
		{
			MethodName: "AddMailToFolderById",
			Handler:    _DatabaseRepository_AddMailToFolderById_Handler,
		},
		{
			MethodName: "AddMailToFolderByObject",
			Handler:    _DatabaseRepository_AddMailToFolderByObject_Handler,
		},
		{
			MethodName: "DeleteFolderMail",
			Handler:    _DatabaseRepository_DeleteFolderMail_Handler,
		},
		{
			MethodName: "MoveFolderMail",
			Handler:    _DatabaseRepository_MoveFolderMail_Handler,
		},
		{
			MethodName: "AddAttachLink",
			Handler:    _DatabaseRepository_AddAttachLink_Handler,
		},
		{
			MethodName: "CheckAttachLink",
			Handler:    _DatabaseRepository_CheckAttachLink_Handler,
		},
		{
			MethodName: "ListAttaches",
			Handler:    _DatabaseRepository_ListAttaches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/repository.proto",
}
