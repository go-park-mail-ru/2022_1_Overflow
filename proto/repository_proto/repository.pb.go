// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: proto/repository.proto

package repository_proto

import (
	utils_proto "OverflowBackend/proto/utils_proto"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsMailMovedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	MailId int32 `protobuf:"varint,2,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (x *IsMailMovedRequest) Reset() {
	*x = IsMailMovedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMailMovedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMailMovedRequest) ProtoMessage() {}

func (x *IsMailMovedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMailMovedRequest.ProtoReflect.Descriptor instead.
func (*IsMailMovedRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{0}
}

func (x *IsMailMovedRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IsMailMovedRequest) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

type UpdateMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	MailId int32  `protobuf:"varint,2,opt,name=mailId,proto3" json:"mailId,omitempty"`
	Mail   []byte `protobuf:"bytes,3,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (x *UpdateMailRequest) Reset() {
	*x = UpdateMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMailRequest) ProtoMessage() {}

func (x *UpdateMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMailRequest.ProtoReflect.Descriptor instead.
func (*UpdateMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateMailRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateMailRequest) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

func (x *UpdateMailRequest) GetMail() []byte {
	if x != nil {
		return x.Mail
	}
	return nil
}

type MoveFolderMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FolderNameSrc  string `protobuf:"bytes,2,opt,name=folderNameSrc,proto3" json:"folderNameSrc,omitempty"`
	FolderNameDest string `protobuf:"bytes,3,opt,name=folderNameDest,proto3" json:"folderNameDest,omitempty"`
	MailId         int32  `protobuf:"varint,4,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (x *MoveFolderMailRequest) Reset() {
	*x = MoveFolderMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFolderMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFolderMailRequest) ProtoMessage() {}

func (x *MoveFolderMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFolderMailRequest.ProtoReflect.Descriptor instead.
func (*MoveFolderMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{2}
}

func (x *MoveFolderMailRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MoveFolderMailRequest) GetFolderNameSrc() string {
	if x != nil {
		return x.FolderNameSrc
	}
	return ""
}

func (x *MoveFolderMailRequest) GetFolderNameDest() string {
	if x != nil {
		return x.FolderNameDest
	}
	return ""
}

func (x *MoveFolderMailRequest) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

type GetUserInfoByUsernameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetUserInfoByUsernameRequest) Reset() {
	*x = GetUserInfoByUsernameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByUsernameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByUsernameRequest) ProtoMessage() {}

func (x *GetUserInfoByUsernameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByUsernameRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoByUsernameRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserInfoByUsernameRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetUserInfoByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserInfoByIdRequest) Reset() {
	*x = GetUserInfoByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoByIdRequest) ProtoMessage() {}

func (x *GetUserInfoByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoByIdRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserInfoByIdRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{5}
}

func (x *AddUserRequest) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

type ChangeForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User []byte `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ChangeForm) Reset() {
	*x = ChangeForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeForm) ProtoMessage() {}

func (x *ChangeForm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeForm.ProtoReflect.Descriptor instead.
func (*ChangeForm) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeForm) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChangeForm) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetIncomeMailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetIncomeMailsRequest) Reset() {
	*x = GetIncomeMailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncomeMailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncomeMailsRequest) ProtoMessage() {}

func (x *GetIncomeMailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncomeMailsRequest.ProtoReflect.Descriptor instead.
func (*GetIncomeMailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{7}
}

func (x *GetIncomeMailsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetIncomeMailsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetIncomeMailsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetOutcomeMailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetOutcomeMailsRequest) Reset() {
	*x = GetOutcomeMailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutcomeMailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutcomeMailsRequest) ProtoMessage() {}

func (x *GetOutcomeMailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutcomeMailsRequest.ProtoReflect.Descriptor instead.
func (*GetOutcomeMailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{8}
}

func (x *GetOutcomeMailsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetOutcomeMailsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOutcomeMailsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AddMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mail []byte `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (x *AddMailRequest) Reset() {
	*x = AddMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMailRequest) ProtoMessage() {}

func (x *AddMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMailRequest.ProtoReflect.Descriptor instead.
func (*AddMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{9}
}

func (x *AddMailRequest) GetMail() []byte {
	if x != nil {
		return x.Mail
	}
	return nil
}

type DeleteMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mail   []byte `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteMailRequest) Reset() {
	*x = DeleteMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMailRequest) ProtoMessage() {}

func (x *DeleteMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMailRequest.ProtoReflect.Descriptor instead.
func (*DeleteMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteMailRequest) GetMail() []byte {
	if x != nil {
		return x.Mail
	}
	return nil
}

func (x *DeleteMailRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ReadMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mail []byte `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail,omitempty"`
	Read bool   `protobuf:"varint,2,opt,name=read,proto3" json:"read,omitempty"`
}

func (x *ReadMailRequest) Reset() {
	*x = ReadMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMailRequest) ProtoMessage() {}

func (x *ReadMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMailRequest.ProtoReflect.Descriptor instead.
func (*ReadMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{11}
}

func (x *ReadMailRequest) GetMail() []byte {
	if x != nil {
		return x.Mail
	}
	return nil
}

func (x *ReadMailRequest) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

type GetMailInfoByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId int32 `protobuf:"varint,1,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (x *GetMailInfoByIdRequest) Reset() {
	*x = GetMailInfoByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMailInfoByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailInfoByIdRequest) ProtoMessage() {}

func (x *GetMailInfoByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailInfoByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMailInfoByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{12}
}

func (x *GetMailInfoByIdRequest) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

type GetFolderByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId int32 `protobuf:"varint,1,opt,name=folderId,proto3" json:"folderId,omitempty"`
}

func (x *GetFolderByIdRequest) Reset() {
	*x = GetFolderByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFolderByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFolderByIdRequest) ProtoMessage() {}

func (x *GetFolderByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFolderByIdRequest.ProtoReflect.Descriptor instead.
func (*GetFolderByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{13}
}

func (x *GetFolderByIdRequest) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

type GetFolderByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folderName,proto3" json:"folderName,omitempty"`
}

func (x *GetFolderByNameRequest) Reset() {
	*x = GetFolderByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFolderByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFolderByNameRequest) ProtoMessage() {}

func (x *GetFolderByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFolderByNameRequest.ProtoReflect.Descriptor instead.
func (*GetFolderByNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{14}
}

func (x *GetFolderByNameRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFolderByNameRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

type GetFoldersByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetFoldersByUserRequest) Reset() {
	*x = GetFoldersByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFoldersByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFoldersByUserRequest) ProtoMessage() {}

func (x *GetFoldersByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFoldersByUserRequest.ProtoReflect.Descriptor instead.
func (*GetFoldersByUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{15}
}

func (x *GetFoldersByUserRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFoldersByUserRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetFoldersByUserRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetFolderMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folderName,proto3" json:"folderName,omitempty"`
	Limit      int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetFolderMailRequest) Reset() {
	*x = GetFolderMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFolderMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFolderMailRequest) ProtoMessage() {}

func (x *GetFolderMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFolderMailRequest.ProtoReflect.Descriptor instead.
func (*GetFolderMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{16}
}

func (x *GetFolderMailRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFolderMailRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *GetFolderMailRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetFolderMailRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type DeleteFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folderName,proto3" json:"folderName,omitempty"`
}

func (x *DeleteFolderRequest) Reset() {
	*x = DeleteFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFolderRequest) ProtoMessage() {}

func (x *DeleteFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFolderRequest.ProtoReflect.Descriptor instead.
func (*DeleteFolderRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteFolderRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteFolderRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

type AddFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AddFolderRequest) Reset() {
	*x = AddFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFolderRequest) ProtoMessage() {}

func (x *AddFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFolderRequest.ProtoReflect.Descriptor instead.
func (*AddFolderRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{18}
}

func (x *AddFolderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddFolderRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ChangeFolderNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folderName,proto3" json:"folderName,omitempty"`
	NewName    string `protobuf:"bytes,3,opt,name=newName,proto3" json:"newName,omitempty"`
}

func (x *ChangeFolderNameRequest) Reset() {
	*x = ChangeFolderNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeFolderNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeFolderNameRequest) ProtoMessage() {}

func (x *ChangeFolderNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeFolderNameRequest.ProtoReflect.Descriptor instead.
func (*ChangeFolderNameRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{19}
}

func (x *ChangeFolderNameRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangeFolderNameRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *ChangeFolderNameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type AddMailToFolderByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folderName,proto3" json:"folderName,omitempty"`
	MailId     int32  `protobuf:"varint,3,opt,name=mailId,proto3" json:"mailId,omitempty"`
	Move       bool   `protobuf:"varint,4,opt,name=move,proto3" json:"move,omitempty"`
}

func (x *AddMailToFolderByIdRequest) Reset() {
	*x = AddMailToFolderByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMailToFolderByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMailToFolderByIdRequest) ProtoMessage() {}

func (x *AddMailToFolderByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMailToFolderByIdRequest.ProtoReflect.Descriptor instead.
func (*AddMailToFolderByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{20}
}

func (x *AddMailToFolderByIdRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddMailToFolderByIdRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *AddMailToFolderByIdRequest) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

func (x *AddMailToFolderByIdRequest) GetMove() bool {
	if x != nil {
		return x.Move
	}
	return false
}

type AddMailToFolderByObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folderName,proto3" json:"folderName,omitempty"`
	Mail       []byte `protobuf:"bytes,3,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (x *AddMailToFolderByObjectRequest) Reset() {
	*x = AddMailToFolderByObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMailToFolderByObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMailToFolderByObjectRequest) ProtoMessage() {}

func (x *AddMailToFolderByObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMailToFolderByObjectRequest.ProtoReflect.Descriptor instead.
func (*AddMailToFolderByObjectRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{21}
}

func (x *AddMailToFolderByObjectRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddMailToFolderByObjectRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *AddMailToFolderByObjectRequest) GetMail() []byte {
	if x != nil {
		return x.Mail
	}
	return nil
}

type DeleteFolderMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	MailId int32 `protobuf:"varint,2,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (x *DeleteFolderMailRequest) Reset() {
	*x = DeleteFolderMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFolderMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFolderMailRequest) ProtoMessage() {}

func (x *DeleteFolderMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFolderMailRequest.ProtoReflect.Descriptor instead.
func (*DeleteFolderMailRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFolderMailRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteFolderMailRequest) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

type AddAttachLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailID   int32  `protobuf:"varint,1,opt,name=mailID,proto3" json:"mailID,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *AddAttachLinkRequest) Reset() {
	*x = AddAttachLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAttachLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAttachLinkRequest) ProtoMessage() {}

func (x *AddAttachLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAttachLinkRequest.ProtoReflect.Descriptor instead.
func (*AddAttachLinkRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{23}
}

func (x *AddAttachLinkRequest) GetMailID() int32 {
	if x != nil {
		return x.MailID
	}
	return 0
}

func (x *AddAttachLinkRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type GetAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailID   int32  `protobuf:"varint,1,opt,name=mailID,proto3" json:"mailID,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *GetAttachRequest) Reset() {
	*x = GetAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachRequest) ProtoMessage() {}

func (x *GetAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachRequest.ProtoReflect.Descriptor instead.
func (*GetAttachRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{24}
}

func (x *GetAttachRequest) GetMailID() int32 {
	if x != nil {
		return x.MailID
	}
	return 0
}

func (x *GetAttachRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type CountUnreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *CountUnreadRequest) Reset() {
	*x = CountUnreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountUnreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUnreadRequest) ProtoMessage() {}

func (x *CountUnreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUnreadRequest.ProtoReflect.Descriptor instead.
func (*CountUnreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{25}
}

func (x *CountUnreadRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type AttachPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *AttachPermissionRequest) Reset() {
	*x = AttachPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachPermissionRequest) ProtoMessage() {}

func (x *AttachPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachPermissionRequest.ProtoReflect.Descriptor instead.
func (*AttachPermissionRequest) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{26}
}

func (x *AttachPermissionRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AttachPermissionRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ResponseIsMoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moved bool `protobuf:"varint,1,opt,name=moved,proto3" json:"moved,omitempty"`
}

func (x *ResponseIsMoved) Reset() {
	*x = ResponseIsMoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseIsMoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseIsMoved) ProtoMessage() {}

func (x *ResponseIsMoved) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseIsMoved.ProtoReflect.Descriptor instead.
func (*ResponseIsMoved) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{27}
}

func (x *ResponseIsMoved) GetMoved() bool {
	if x != nil {
		return x.Moved
	}
	return false
}

type ResponseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *utils_proto.DatabaseResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	User     []byte                        `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ResponseUser) Reset() {
	*x = ResponseUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUser) ProtoMessage() {}

func (x *ResponseUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUser.ProtoReflect.Descriptor instead.
func (*ResponseUser) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{28}
}

func (x *ResponseUser) GetResponse() *utils_proto.DatabaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResponseUser) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

type ResponseMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *utils_proto.DatabaseResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Mail     []byte                        `protobuf:"bytes,2,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (x *ResponseMail) Reset() {
	*x = ResponseMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMail) ProtoMessage() {}

func (x *ResponseMail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMail.ProtoReflect.Descriptor instead.
func (*ResponseMail) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{29}
}

func (x *ResponseMail) GetResponse() *utils_proto.DatabaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResponseMail) GetMail() []byte {
	if x != nil {
		return x.Mail
	}
	return nil
}

type ResponseFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *utils_proto.DatabaseResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Folder   []byte                        `protobuf:"bytes,2,opt,name=folder,proto3" json:"folder,omitempty"`
}

func (x *ResponseFolder) Reset() {
	*x = ResponseFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFolder) ProtoMessage() {}

func (x *ResponseFolder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFolder.ProtoReflect.Descriptor instead.
func (*ResponseFolder) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{30}
}

func (x *ResponseFolder) GetResponse() *utils_proto.DatabaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResponseFolder) GetFolder() []byte {
	if x != nil {
		return x.Folder
	}
	return nil
}

type ResponseFolders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *utils_proto.DatabaseResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Folders  []byte                        `protobuf:"bytes,2,opt,name=folders,proto3" json:"folders,omitempty"`
}

func (x *ResponseFolders) Reset() {
	*x = ResponseFolders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFolders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFolders) ProtoMessage() {}

func (x *ResponseFolders) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFolders.ProtoReflect.Descriptor instead.
func (*ResponseFolders) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{31}
}

func (x *ResponseFolders) GetResponse() *utils_proto.DatabaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResponseFolders) GetFolders() []byte {
	if x != nil {
		return x.Folders
	}
	return nil
}

type ResponseMails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *utils_proto.DatabaseResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Mails    []byte                        `protobuf:"bytes,2,opt,name=mails,proto3" json:"mails,omitempty"`
}

func (x *ResponseMails) Reset() {
	*x = ResponseMails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMails) ProtoMessage() {}

func (x *ResponseMails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMails.ProtoReflect.Descriptor instead.
func (*ResponseMails) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{32}
}

func (x *ResponseMails) GetResponse() *utils_proto.DatabaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResponseMails) GetMails() []byte {
	if x != nil {
		return x.Mails
	}
	return nil
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{33}
}

func (x *Nothing) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ResponseAttaches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filenames []byte `protobuf:"bytes,1,opt,name=filenames,proto3" json:"filenames,omitempty"`
}

func (x *ResponseAttaches) Reset() {
	*x = ResponseAttaches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAttaches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAttaches) ProtoMessage() {}

func (x *ResponseAttaches) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAttaches.ProtoReflect.Descriptor instead.
func (*ResponseAttaches) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{34}
}

func (x *ResponseAttaches) GetFilenames() []byte {
	if x != nil {
		return x.Filenames
	}
	return nil
}

type ResponseCountUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseCountUnread) Reset() {
	*x = ResponseCountUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCountUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCountUnread) ProtoMessage() {}

func (x *ResponseCountUnread) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCountUnread.ProtoReflect.Descriptor instead.
func (*ResponseCountUnread) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{35}
}

func (x *ResponseCountUnread) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ResponseAttachPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access bool `protobuf:"varint,1,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *ResponseAttachPermission) Reset() {
	*x = ResponseAttachPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_repository_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAttachPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAttachPermission) ProtoMessage() {}

func (x *ResponseAttachPermission) ProtoReflect() protoreflect.Message {
	mi := &file_proto_repository_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAttachPermission.ProtoReflect.Descriptor instead.
func (*ResponseAttachPermission) Descriptor() ([]byte, []int) {
	return file_proto_repository_proto_rawDescGZIP(), []int{36}
}

func (x *ResponseAttachPermission) GetAccess() bool {
	if x != nil {
		return x.Access
	}
	return false
}

var File_proto_repository_proto protoreflect.FileDescriptor

var file_proto_repository_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a,
	0x12, 0x49, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x95, 0x01, 0x0a,
	0x15, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x72, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x72, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x24, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5e, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x24, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x40, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64,
	0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x22, 0x32, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x7c, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x6c, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69,
	0x6c, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x22, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x5d, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x22, 0x60, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x21, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x81, 0x15, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x69, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x24, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x26, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x12,
	0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x29,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x49, 0x73,
	0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x4d,
	0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x73, 0x4d, 0x6f, 0x76,
	0x65, 0x64, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x73, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_repository_proto_rawDescOnce sync.Once
	file_proto_repository_proto_rawDescData = file_proto_repository_proto_rawDesc
)

func file_proto_repository_proto_rawDescGZIP() []byte {
	file_proto_repository_proto_rawDescOnce.Do(func() {
		file_proto_repository_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_repository_proto_rawDescData)
	})
	return file_proto_repository_proto_rawDescData
}

var file_proto_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_proto_repository_proto_goTypes = []interface{}{
	(*IsMailMovedRequest)(nil),                 // 0: repository_proto.IsMailMovedRequest
	(*UpdateMailRequest)(nil),                  // 1: repository_proto.UpdateMailRequest
	(*MoveFolderMailRequest)(nil),              // 2: repository_proto.MoveFolderMailRequest
	(*GetUserInfoByUsernameRequest)(nil),       // 3: repository_proto.GetUserInfoByUsernameRequest
	(*GetUserInfoByIdRequest)(nil),             // 4: repository_proto.GetUserInfoByIdRequest
	(*AddUserRequest)(nil),                     // 5: repository_proto.AddUserRequest
	(*ChangeForm)(nil),                         // 6: repository_proto.ChangeForm
	(*GetIncomeMailsRequest)(nil),              // 7: repository_proto.GetIncomeMailsRequest
	(*GetOutcomeMailsRequest)(nil),             // 8: repository_proto.GetOutcomeMailsRequest
	(*AddMailRequest)(nil),                     // 9: repository_proto.AddMailRequest
	(*DeleteMailRequest)(nil),                  // 10: repository_proto.DeleteMailRequest
	(*ReadMailRequest)(nil),                    // 11: repository_proto.ReadMailRequest
	(*GetMailInfoByIdRequest)(nil),             // 12: repository_proto.GetMailInfoByIdRequest
	(*GetFolderByIdRequest)(nil),               // 13: repository_proto.GetFolderByIdRequest
	(*GetFolderByNameRequest)(nil),             // 14: repository_proto.GetFolderByNameRequest
	(*GetFoldersByUserRequest)(nil),            // 15: repository_proto.GetFoldersByUserRequest
	(*GetFolderMailRequest)(nil),               // 16: repository_proto.GetFolderMailRequest
	(*DeleteFolderRequest)(nil),                // 17: repository_proto.DeleteFolderRequest
	(*AddFolderRequest)(nil),                   // 18: repository_proto.AddFolderRequest
	(*ChangeFolderNameRequest)(nil),            // 19: repository_proto.ChangeFolderNameRequest
	(*AddMailToFolderByIdRequest)(nil),         // 20: repository_proto.AddMailToFolderByIdRequest
	(*AddMailToFolderByObjectRequest)(nil),     // 21: repository_proto.AddMailToFolderByObjectRequest
	(*DeleteFolderMailRequest)(nil),            // 22: repository_proto.DeleteFolderMailRequest
	(*AddAttachLinkRequest)(nil),               // 23: repository_proto.AddAttachLinkRequest
	(*GetAttachRequest)(nil),                   // 24: repository_proto.GetAttachRequest
	(*CountUnreadRequest)(nil),                 // 25: repository_proto.CountUnreadRequest
	(*AttachPermissionRequest)(nil),            // 26: repository_proto.AttachPermissionRequest
	(*ResponseIsMoved)(nil),                    // 27: repository_proto.ResponseIsMoved
	(*ResponseUser)(nil),                       // 28: repository_proto.ResponseUser
	(*ResponseMail)(nil),                       // 29: repository_proto.ResponseMail
	(*ResponseFolder)(nil),                     // 30: repository_proto.ResponseFolder
	(*ResponseFolders)(nil),                    // 31: repository_proto.ResponseFolders
	(*ResponseMails)(nil),                      // 32: repository_proto.ResponseMails
	(*Nothing)(nil),                            // 33: repository_proto.Nothing
	(*ResponseAttaches)(nil),                   // 34: repository_proto.ResponseAttaches
	(*ResponseCountUnread)(nil),                // 35: repository_proto.ResponseCountUnread
	(*ResponseAttachPermission)(nil),           // 36: repository_proto.ResponseAttachPermission
	(*utils_proto.DatabaseResponse)(nil),       // 37: utils.DatabaseResponse
	(*utils_proto.DatabaseExtendResponse)(nil), // 38: utils.DatabaseExtendResponse
}
var file_proto_repository_proto_depIdxs = []int32{
	37, // 0: repository_proto.ResponseUser.response:type_name -> utils.DatabaseResponse
	37, // 1: repository_proto.ResponseMail.response:type_name -> utils.DatabaseResponse
	37, // 2: repository_proto.ResponseFolder.response:type_name -> utils.DatabaseResponse
	37, // 3: repository_proto.ResponseFolders.response:type_name -> utils.DatabaseResponse
	37, // 4: repository_proto.ResponseMails.response:type_name -> utils.DatabaseResponse
	3,  // 5: repository_proto.DatabaseRepository.GetUserInfoByUsername:input_type -> repository_proto.GetUserInfoByUsernameRequest
	4,  // 6: repository_proto.DatabaseRepository.GetUserInfoById:input_type -> repository_proto.GetUserInfoByIdRequest
	5,  // 7: repository_proto.DatabaseRepository.AddUser:input_type -> repository_proto.AddUserRequest
	6,  // 8: repository_proto.DatabaseRepository.ChangeUserPassword:input_type -> repository_proto.ChangeForm
	6,  // 9: repository_proto.DatabaseRepository.ChangeUserFirstName:input_type -> repository_proto.ChangeForm
	6,  // 10: repository_proto.DatabaseRepository.ChangeUserLastName:input_type -> repository_proto.ChangeForm
	7,  // 11: repository_proto.DatabaseRepository.GetIncomeMails:input_type -> repository_proto.GetIncomeMailsRequest
	8,  // 12: repository_proto.DatabaseRepository.GetOutcomeMails:input_type -> repository_proto.GetOutcomeMailsRequest
	9,  // 13: repository_proto.DatabaseRepository.AddMail:input_type -> repository_proto.AddMailRequest
	10, // 14: repository_proto.DatabaseRepository.DeleteMail:input_type -> repository_proto.DeleteMailRequest
	1,  // 15: repository_proto.DatabaseRepository.UpdateMail:input_type -> repository_proto.UpdateMailRequest
	11, // 16: repository_proto.DatabaseRepository.ReadMail:input_type -> repository_proto.ReadMailRequest
	12, // 17: repository_proto.DatabaseRepository.GetMailInfoById:input_type -> repository_proto.GetMailInfoByIdRequest
	25, // 18: repository_proto.DatabaseRepository.CountUnread:input_type -> repository_proto.CountUnreadRequest
	13, // 19: repository_proto.DatabaseRepository.GetFolderById:input_type -> repository_proto.GetFolderByIdRequest
	14, // 20: repository_proto.DatabaseRepository.GetFolderByName:input_type -> repository_proto.GetFolderByNameRequest
	15, // 21: repository_proto.DatabaseRepository.GetFoldersByUser:input_type -> repository_proto.GetFoldersByUserRequest
	16, // 22: repository_proto.DatabaseRepository.GetFolderMail:input_type -> repository_proto.GetFolderMailRequest
	17, // 23: repository_proto.DatabaseRepository.DeleteFolder:input_type -> repository_proto.DeleteFolderRequest
	18, // 24: repository_proto.DatabaseRepository.AddFolder:input_type -> repository_proto.AddFolderRequest
	19, // 25: repository_proto.DatabaseRepository.ChangeFolderName:input_type -> repository_proto.ChangeFolderNameRequest
	20, // 26: repository_proto.DatabaseRepository.AddMailToFolderById:input_type -> repository_proto.AddMailToFolderByIdRequest
	21, // 27: repository_proto.DatabaseRepository.AddMailToFolderByObject:input_type -> repository_proto.AddMailToFolderByObjectRequest
	22, // 28: repository_proto.DatabaseRepository.DeleteFolderMail:input_type -> repository_proto.DeleteFolderMailRequest
	2,  // 29: repository_proto.DatabaseRepository.MoveFolderMail:input_type -> repository_proto.MoveFolderMailRequest
	0,  // 30: repository_proto.DatabaseRepository.IsMailMoved:input_type -> repository_proto.IsMailMovedRequest
	23, // 31: repository_proto.DatabaseRepository.AddAttachLink:input_type -> repository_proto.AddAttachLinkRequest
	24, // 32: repository_proto.DatabaseRepository.CheckAttachLink:input_type -> repository_proto.GetAttachRequest
	24, // 33: repository_proto.DatabaseRepository.ListAttaches:input_type -> repository_proto.GetAttachRequest
	26, // 34: repository_proto.DatabaseRepository.CheckAttachPermission:input_type -> repository_proto.AttachPermissionRequest
	28, // 35: repository_proto.DatabaseRepository.GetUserInfoByUsername:output_type -> repository_proto.ResponseUser
	28, // 36: repository_proto.DatabaseRepository.GetUserInfoById:output_type -> repository_proto.ResponseUser
	37, // 37: repository_proto.DatabaseRepository.AddUser:output_type -> utils.DatabaseResponse
	37, // 38: repository_proto.DatabaseRepository.ChangeUserPassword:output_type -> utils.DatabaseResponse
	37, // 39: repository_proto.DatabaseRepository.ChangeUserFirstName:output_type -> utils.DatabaseResponse
	37, // 40: repository_proto.DatabaseRepository.ChangeUserLastName:output_type -> utils.DatabaseResponse
	32, // 41: repository_proto.DatabaseRepository.GetIncomeMails:output_type -> repository_proto.ResponseMails
	32, // 42: repository_proto.DatabaseRepository.GetOutcomeMails:output_type -> repository_proto.ResponseMails
	38, // 43: repository_proto.DatabaseRepository.AddMail:output_type -> utils.DatabaseExtendResponse
	37, // 44: repository_proto.DatabaseRepository.DeleteMail:output_type -> utils.DatabaseResponse
	37, // 45: repository_proto.DatabaseRepository.UpdateMail:output_type -> utils.DatabaseResponse
	37, // 46: repository_proto.DatabaseRepository.ReadMail:output_type -> utils.DatabaseResponse
	29, // 47: repository_proto.DatabaseRepository.GetMailInfoById:output_type -> repository_proto.ResponseMail
	35, // 48: repository_proto.DatabaseRepository.CountUnread:output_type -> repository_proto.ResponseCountUnread
	30, // 49: repository_proto.DatabaseRepository.GetFolderById:output_type -> repository_proto.ResponseFolder
	30, // 50: repository_proto.DatabaseRepository.GetFolderByName:output_type -> repository_proto.ResponseFolder
	31, // 51: repository_proto.DatabaseRepository.GetFoldersByUser:output_type -> repository_proto.ResponseFolders
	32, // 52: repository_proto.DatabaseRepository.GetFolderMail:output_type -> repository_proto.ResponseMails
	37, // 53: repository_proto.DatabaseRepository.DeleteFolder:output_type -> utils.DatabaseResponse
	37, // 54: repository_proto.DatabaseRepository.AddFolder:output_type -> utils.DatabaseResponse
	37, // 55: repository_proto.DatabaseRepository.ChangeFolderName:output_type -> utils.DatabaseResponse
	37, // 56: repository_proto.DatabaseRepository.AddMailToFolderById:output_type -> utils.DatabaseResponse
	37, // 57: repository_proto.DatabaseRepository.AddMailToFolderByObject:output_type -> utils.DatabaseResponse
	37, // 58: repository_proto.DatabaseRepository.DeleteFolderMail:output_type -> utils.DatabaseResponse
	37, // 59: repository_proto.DatabaseRepository.MoveFolderMail:output_type -> utils.DatabaseResponse
	27, // 60: repository_proto.DatabaseRepository.IsMailMoved:output_type -> repository_proto.ResponseIsMoved
	33, // 61: repository_proto.DatabaseRepository.AddAttachLink:output_type -> repository_proto.Nothing
	33, // 62: repository_proto.DatabaseRepository.CheckAttachLink:output_type -> repository_proto.Nothing
	34, // 63: repository_proto.DatabaseRepository.ListAttaches:output_type -> repository_proto.ResponseAttaches
	36, // 64: repository_proto.DatabaseRepository.CheckAttachPermission:output_type -> repository_proto.ResponseAttachPermission
	35, // [35:65] is the sub-list for method output_type
	5,  // [5:35] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_repository_proto_init() }
func file_proto_repository_proto_init() {
	if File_proto_repository_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_repository_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMailMovedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFolderMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByUsernameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIncomeMailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutcomeMailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMailInfoByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFolderByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFolderByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFoldersByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFolderMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeFolderNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMailToFolderByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMailToFolderByObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFolderMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAttachLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountUnreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseIsMoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFolders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAttaches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCountUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_repository_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAttachPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_repository_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_repository_proto_goTypes,
		DependencyIndexes: file_proto_repository_proto_depIdxs,
		MessageInfos:      file_proto_repository_proto_msgTypes,
	}.Build()
	File_proto_repository_proto = out.File
	file_proto_repository_proto_rawDesc = nil
	file_proto_repository_proto_goTypes = nil
	file_proto_repository_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatabaseRepositoryClient is the client API for DatabaseRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseRepositoryClient interface {
	GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameRequest, opts ...grpc.CallOption) (*ResponseUser, error)
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*ResponseUser, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeUserPassword(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeUserFirstName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeUserLastName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	GetIncomeMails(ctx context.Context, in *GetIncomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	GetOutcomeMails(ctx context.Context, in *GetOutcomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	AddMail(ctx context.Context, in *AddMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseExtendResponse, error)
	DeleteMail(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	UpdateMail(ctx context.Context, in *UpdateMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	GetMailInfoById(ctx context.Context, in *GetMailInfoByIdRequest, opts ...grpc.CallOption) (*ResponseMail, error)
	CountUnread(ctx context.Context, in *CountUnreadRequest, opts ...grpc.CallOption) (*ResponseCountUnread, error)
	GetFolderById(ctx context.Context, in *GetFolderByIdRequest, opts ...grpc.CallOption) (*ResponseFolder, error)
	GetFolderByName(ctx context.Context, in *GetFolderByNameRequest, opts ...grpc.CallOption) (*ResponseFolder, error)
	GetFoldersByUser(ctx context.Context, in *GetFoldersByUserRequest, opts ...grpc.CallOption) (*ResponseFolders, error)
	GetFolderMail(ctx context.Context, in *GetFolderMailRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	AddFolder(ctx context.Context, in *AddFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	ChangeFolderName(ctx context.Context, in *ChangeFolderNameRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderById(ctx context.Context, in *AddMailToFolderByIdRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderByObject(ctx context.Context, in *AddMailToFolderByObjectRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	DeleteFolderMail(ctx context.Context, in *DeleteFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	MoveFolderMail(ctx context.Context, in *MoveFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error)
	IsMailMoved(ctx context.Context, in *IsMailMovedRequest, opts ...grpc.CallOption) (*ResponseIsMoved, error)
	AddAttachLink(ctx context.Context, in *AddAttachLinkRequest, opts ...grpc.CallOption) (*Nothing, error)
	CheckAttachLink(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*Nothing, error)
	ListAttaches(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*ResponseAttaches, error)
	CheckAttachPermission(ctx context.Context, in *AttachPermissionRequest, opts ...grpc.CallOption) (*ResponseAttachPermission, error)
}

type databaseRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseRepositoryClient(cc grpc.ClientConnInterface) DatabaseRepositoryClient {
	return &databaseRepositoryClient{cc}
}

func (c *databaseRepositoryClient) GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetUserInfoByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeUserPassword(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeUserFirstName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeUserFirstName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeUserLastName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeUserLastName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetIncomeMails(ctx context.Context, in *GetIncomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetIncomeMails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetOutcomeMails(ctx context.Context, in *GetOutcomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetOutcomeMails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddMail(ctx context.Context, in *AddMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseExtendResponse, error) {
	out := new(utils_proto.DatabaseExtendResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) DeleteMail(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/DeleteMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) UpdateMail(ctx context.Context, in *UpdateMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/UpdateMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ReadMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetMailInfoById(ctx context.Context, in *GetMailInfoByIdRequest, opts ...grpc.CallOption) (*ResponseMail, error) {
	out := new(ResponseMail)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetMailInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) CountUnread(ctx context.Context, in *CountUnreadRequest, opts ...grpc.CallOption) (*ResponseCountUnread, error) {
	out := new(ResponseCountUnread)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/CountUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFolderById(ctx context.Context, in *GetFolderByIdRequest, opts ...grpc.CallOption) (*ResponseFolder, error) {
	out := new(ResponseFolder)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFolderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFolderByName(ctx context.Context, in *GetFolderByNameRequest, opts ...grpc.CallOption) (*ResponseFolder, error) {
	out := new(ResponseFolder)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFolderByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFoldersByUser(ctx context.Context, in *GetFoldersByUserRequest, opts ...grpc.CallOption) (*ResponseFolders, error) {
	out := new(ResponseFolders)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFoldersByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) GetFolderMail(ctx context.Context, in *GetFolderMailRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/GetFolderMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/DeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddFolder(ctx context.Context, in *AddFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ChangeFolderName(ctx context.Context, in *ChangeFolderNameRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ChangeFolderName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddMailToFolderById(ctx context.Context, in *AddMailToFolderByIdRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddMailToFolderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddMailToFolderByObject(ctx context.Context, in *AddMailToFolderByObjectRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddMailToFolderByObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) DeleteFolderMail(ctx context.Context, in *DeleteFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/DeleteFolderMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) MoveFolderMail(ctx context.Context, in *MoveFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	out := new(utils_proto.DatabaseResponse)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/MoveFolderMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) IsMailMoved(ctx context.Context, in *IsMailMovedRequest, opts ...grpc.CallOption) (*ResponseIsMoved, error) {
	out := new(ResponseIsMoved)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/IsMailMoved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) AddAttachLink(ctx context.Context, in *AddAttachLinkRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/AddAttachLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) CheckAttachLink(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/CheckAttachLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) ListAttaches(ctx context.Context, in *GetAttachRequest, opts ...grpc.CallOption) (*ResponseAttaches, error) {
	out := new(ResponseAttaches)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/ListAttaches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRepositoryClient) CheckAttachPermission(ctx context.Context, in *AttachPermissionRequest, opts ...grpc.CallOption) (*ResponseAttachPermission, error) {
	out := new(ResponseAttachPermission)
	err := c.cc.Invoke(ctx, "/repository_proto.DatabaseRepository/CheckAttachPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseRepositoryServer is the server API for DatabaseRepository service.
type DatabaseRepositoryServer interface {
	GetUserInfoByUsername(context.Context, *GetUserInfoByUsernameRequest) (*ResponseUser, error)
	GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*ResponseUser, error)
	AddUser(context.Context, *AddUserRequest) (*utils_proto.DatabaseResponse, error)
	ChangeUserPassword(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error)
	ChangeUserFirstName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error)
	ChangeUserLastName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error)
	GetIncomeMails(context.Context, *GetIncomeMailsRequest) (*ResponseMails, error)
	GetOutcomeMails(context.Context, *GetOutcomeMailsRequest) (*ResponseMails, error)
	AddMail(context.Context, *AddMailRequest) (*utils_proto.DatabaseExtendResponse, error)
	DeleteMail(context.Context, *DeleteMailRequest) (*utils_proto.DatabaseResponse, error)
	UpdateMail(context.Context, *UpdateMailRequest) (*utils_proto.DatabaseResponse, error)
	ReadMail(context.Context, *ReadMailRequest) (*utils_proto.DatabaseResponse, error)
	GetMailInfoById(context.Context, *GetMailInfoByIdRequest) (*ResponseMail, error)
	CountUnread(context.Context, *CountUnreadRequest) (*ResponseCountUnread, error)
	GetFolderById(context.Context, *GetFolderByIdRequest) (*ResponseFolder, error)
	GetFolderByName(context.Context, *GetFolderByNameRequest) (*ResponseFolder, error)
	GetFoldersByUser(context.Context, *GetFoldersByUserRequest) (*ResponseFolders, error)
	GetFolderMail(context.Context, *GetFolderMailRequest) (*ResponseMails, error)
	DeleteFolder(context.Context, *DeleteFolderRequest) (*utils_proto.DatabaseResponse, error)
	AddFolder(context.Context, *AddFolderRequest) (*utils_proto.DatabaseResponse, error)
	ChangeFolderName(context.Context, *ChangeFolderNameRequest) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderById(context.Context, *AddMailToFolderByIdRequest) (*utils_proto.DatabaseResponse, error)
	AddMailToFolderByObject(context.Context, *AddMailToFolderByObjectRequest) (*utils_proto.DatabaseResponse, error)
	DeleteFolderMail(context.Context, *DeleteFolderMailRequest) (*utils_proto.DatabaseResponse, error)
	MoveFolderMail(context.Context, *MoveFolderMailRequest) (*utils_proto.DatabaseResponse, error)
	IsMailMoved(context.Context, *IsMailMovedRequest) (*ResponseIsMoved, error)
	AddAttachLink(context.Context, *AddAttachLinkRequest) (*Nothing, error)
	CheckAttachLink(context.Context, *GetAttachRequest) (*Nothing, error)
	ListAttaches(context.Context, *GetAttachRequest) (*ResponseAttaches, error)
	CheckAttachPermission(context.Context, *AttachPermissionRequest) (*ResponseAttachPermission, error)
}

// UnimplementedDatabaseRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedDatabaseRepositoryServer struct {
}

func (*UnimplementedDatabaseRepositoryServer) GetUserInfoByUsername(context.Context, *GetUserInfoByUsernameRequest) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUsername not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) AddUser(context.Context, *AddUserRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) ChangeUserPassword(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) ChangeUserFirstName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserFirstName not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) ChangeUserLastName(context.Context, *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserLastName not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetIncomeMails(context.Context, *GetIncomeMailsRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeMails not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetOutcomeMails(context.Context, *GetOutcomeMailsRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutcomeMails not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) AddMail(context.Context, *AddMailRequest) (*utils_proto.DatabaseExtendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMail not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) DeleteMail(context.Context, *DeleteMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMail not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) UpdateMail(context.Context, *UpdateMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMail not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) ReadMail(context.Context, *ReadMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMail not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetMailInfoById(context.Context, *GetMailInfoByIdRequest) (*ResponseMail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailInfoById not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) CountUnread(context.Context, *CountUnreadRequest) (*ResponseCountUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUnread not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetFolderById(context.Context, *GetFolderByIdRequest) (*ResponseFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderById not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetFolderByName(context.Context, *GetFolderByNameRequest) (*ResponseFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderByName not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetFoldersByUser(context.Context, *GetFoldersByUserRequest) (*ResponseFolders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoldersByUser not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) GetFolderMail(context.Context, *GetFolderMailRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderMail not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) DeleteFolder(context.Context, *DeleteFolderRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) AddFolder(context.Context, *AddFolderRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFolder not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) ChangeFolderName(context.Context, *ChangeFolderNameRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeFolderName not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) AddMailToFolderById(context.Context, *AddMailToFolderByIdRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMailToFolderById not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) AddMailToFolderByObject(context.Context, *AddMailToFolderByObjectRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMailToFolderByObject not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) DeleteFolderMail(context.Context, *DeleteFolderMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolderMail not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) MoveFolderMail(context.Context, *MoveFolderMailRequest) (*utils_proto.DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFolderMail not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) IsMailMoved(context.Context, *IsMailMovedRequest) (*ResponseIsMoved, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMailMoved not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) AddAttachLink(context.Context, *AddAttachLinkRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttachLink not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) CheckAttachLink(context.Context, *GetAttachRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAttachLink not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) ListAttaches(context.Context, *GetAttachRequest) (*ResponseAttaches, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttaches not implemented")
}
func (*UnimplementedDatabaseRepositoryServer) CheckAttachPermission(context.Context, *AttachPermissionRequest) (*ResponseAttachPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAttachPermission not implemented")
}

func RegisterDatabaseRepositoryServer(s *grpc.Server, srv DatabaseRepositoryServer) {
	s.RegisterService(&_DatabaseRepository_serviceDesc, srv)
}

func _DatabaseRepository_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetUserInfoByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetUserInfoByUsername(ctx, req.(*GetUserInfoByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeUserPassword(ctx, req.(*ChangeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeUserFirstName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeUserFirstName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeUserFirstName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeUserFirstName(ctx, req.(*ChangeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeUserLastName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeUserLastName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeUserLastName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeUserLastName(ctx, req.(*ChangeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetIncomeMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeMailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetIncomeMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetIncomeMails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetIncomeMails(ctx, req.(*GetIncomeMailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetOutcomeMails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutcomeMailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetOutcomeMails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetOutcomeMails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetOutcomeMails(ctx, req.(*GetOutcomeMailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddMail(ctx, req.(*AddMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_DeleteMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).DeleteMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/DeleteMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).DeleteMail(ctx, req.(*DeleteMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_UpdateMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).UpdateMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/UpdateMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).UpdateMail(ctx, req.(*UpdateMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ReadMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ReadMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ReadMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ReadMail(ctx, req.(*ReadMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetMailInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetMailInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetMailInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetMailInfoById(ctx, req.(*GetMailInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_CountUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).CountUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/CountUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).CountUnread(ctx, req.(*CountUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFolderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFolderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFolderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFolderById(ctx, req.(*GetFolderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFolderByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFolderByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFolderByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFolderByName(ctx, req.(*GetFolderByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFoldersByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoldersByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFoldersByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFoldersByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFoldersByUser(ctx, req.(*GetFoldersByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_GetFolderMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).GetFolderMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/GetFolderMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).GetFolderMail(ctx, req.(*GetFolderMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).DeleteFolder(ctx, req.(*DeleteFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddFolder(ctx, req.(*AddFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ChangeFolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFolderNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ChangeFolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ChangeFolderName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ChangeFolderName(ctx, req.(*ChangeFolderNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddMailToFolderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailToFolderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddMailToFolderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddMailToFolderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddMailToFolderById(ctx, req.(*AddMailToFolderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddMailToFolderByObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailToFolderByObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddMailToFolderByObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddMailToFolderByObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddMailToFolderByObject(ctx, req.(*AddMailToFolderByObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_DeleteFolderMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).DeleteFolderMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/DeleteFolderMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).DeleteFolderMail(ctx, req.(*DeleteFolderMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_MoveFolderMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFolderMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).MoveFolderMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/MoveFolderMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).MoveFolderMail(ctx, req.(*MoveFolderMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_IsMailMoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMailMovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).IsMailMoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/IsMailMoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).IsMailMoved(ctx, req.(*IsMailMovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_AddAttachLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttachLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).AddAttachLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/AddAttachLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).AddAttachLink(ctx, req.(*AddAttachLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_CheckAttachLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).CheckAttachLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/CheckAttachLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).CheckAttachLink(ctx, req.(*GetAttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_ListAttaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).ListAttaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/ListAttaches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).ListAttaches(ctx, req.(*GetAttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRepository_CheckAttachPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRepositoryServer).CheckAttachPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository_proto.DatabaseRepository/CheckAttachPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRepositoryServer).CheckAttachPermission(ctx, req.(*AttachPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatabaseRepository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository_proto.DatabaseRepository",
	HandlerType: (*DatabaseRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _DatabaseRepository_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _DatabaseRepository_GetUserInfoById_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _DatabaseRepository_AddUser_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _DatabaseRepository_ChangeUserPassword_Handler,
		},
		{
			MethodName: "ChangeUserFirstName",
			Handler:    _DatabaseRepository_ChangeUserFirstName_Handler,
		},
		{
			MethodName: "ChangeUserLastName",
			Handler:    _DatabaseRepository_ChangeUserLastName_Handler,
		},
		{
			MethodName: "GetIncomeMails",
			Handler:    _DatabaseRepository_GetIncomeMails_Handler,
		},
		{
			MethodName: "GetOutcomeMails",
			Handler:    _DatabaseRepository_GetOutcomeMails_Handler,
		},
		{
			MethodName: "AddMail",
			Handler:    _DatabaseRepository_AddMail_Handler,
		},
		{
			MethodName: "DeleteMail",
			Handler:    _DatabaseRepository_DeleteMail_Handler,
		},
		{
			MethodName: "UpdateMail",
			Handler:    _DatabaseRepository_UpdateMail_Handler,
		},
		{
			MethodName: "ReadMail",
			Handler:    _DatabaseRepository_ReadMail_Handler,
		},
		{
			MethodName: "GetMailInfoById",
			Handler:    _DatabaseRepository_GetMailInfoById_Handler,
		},
		{
			MethodName: "CountUnread",
			Handler:    _DatabaseRepository_CountUnread_Handler,
		},
		{
			MethodName: "GetFolderById",
			Handler:    _DatabaseRepository_GetFolderById_Handler,
		},
		{
			MethodName: "GetFolderByName",
			Handler:    _DatabaseRepository_GetFolderByName_Handler,
		},
		{
			MethodName: "GetFoldersByUser",
			Handler:    _DatabaseRepository_GetFoldersByUser_Handler,
		},
		{
			MethodName: "GetFolderMail",
			Handler:    _DatabaseRepository_GetFolderMail_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _DatabaseRepository_DeleteFolder_Handler,
		},
		{
			MethodName: "AddFolder",
			Handler:    _DatabaseRepository_AddFolder_Handler,
		},
		{
			MethodName: "ChangeFolderName",
			Handler:    _DatabaseRepository_ChangeFolderName_Handler,
		},
		{
			MethodName: "AddMailToFolderById",
			Handler:    _DatabaseRepository_AddMailToFolderById_Handler,
		},
		{
			MethodName: "AddMailToFolderByObject",
			Handler:    _DatabaseRepository_AddMailToFolderByObject_Handler,
		},
		{
			MethodName: "DeleteFolderMail",
			Handler:    _DatabaseRepository_DeleteFolderMail_Handler,
		},
		{
			MethodName: "MoveFolderMail",
			Handler:    _DatabaseRepository_MoveFolderMail_Handler,
		},
		{
			MethodName: "IsMailMoved",
			Handler:    _DatabaseRepository_IsMailMoved_Handler,
		},
		{
			MethodName: "AddAttachLink",
			Handler:    _DatabaseRepository_AddAttachLink_Handler,
		},
		{
			MethodName: "CheckAttachLink",
			Handler:    _DatabaseRepository_CheckAttachLink_Handler,
		},
		{
			MethodName: "ListAttaches",
			Handler:    _DatabaseRepository_ListAttaches_Handler,
		},
		{
			MethodName: "CheckAttachPermission",
			Handler:    _DatabaseRepository_CheckAttachPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/repository.proto",
}
