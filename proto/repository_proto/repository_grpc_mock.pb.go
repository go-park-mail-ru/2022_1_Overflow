// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: proto/repository.proto

package repository_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	utils_proto "OverflowBackend/proto/utils_proto"
)

// MockDatabaseRepositoryClient is a mock of DatabaseRepositoryClient interface.
type MockDatabaseRepositoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepositoryClientMockRecorder
}

// MockDatabaseRepositoryClientMockRecorder is the mock recorder for MockDatabaseRepositoryClient.
type MockDatabaseRepositoryClientMockRecorder struct {
	mock *MockDatabaseRepositoryClient
}

// NewMockDatabaseRepositoryClient creates a new mock instance.
func NewMockDatabaseRepositoryClient(ctrl *gomock.Controller) *MockDatabaseRepositoryClient {
	mock := &MockDatabaseRepositoryClient{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepositoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepositoryClient) EXPECT() *MockDatabaseRepositoryClientMockRecorder {
	return m.recorder
}

// AddFolder mocks base method.
func (m *MockDatabaseRepositoryClient) AddFolder(ctx context.Context, in *AddFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFolder", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockDatabaseRepositoryClientMockRecorder) AddFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).AddFolder), varargs...)
}

// AddMail mocks base method.
func (m *MockDatabaseRepositoryClient) AddMail(ctx context.Context, in *AddMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMail", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMail indicates an expected call of AddMail.
func (mr *MockDatabaseRepositoryClientMockRecorder) AddMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMail", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).AddMail), varargs...)
}

// AddMailToFolder mocks base method.
func (m *MockDatabaseRepositoryClient) AddMailToFolder(ctx context.Context, in *AddMailToFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMailToFolder", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMailToFolder indicates an expected call of AddMailToFolder.
func (mr *MockDatabaseRepositoryClientMockRecorder) AddMailToFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMailToFolder", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).AddMailToFolder), varargs...)
}

// AddUser mocks base method.
func (m *MockDatabaseRepositoryClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseRepositoryClientMockRecorder) AddUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).AddUser), varargs...)
}

// ChangeFolderName mocks base method.
func (m *MockDatabaseRepositoryClient) ChangeFolderName(ctx context.Context, in *ChangeFolderNameRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeFolderName", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeFolderName indicates an expected call of ChangeFolderName.
func (mr *MockDatabaseRepositoryClientMockRecorder) ChangeFolderName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFolderName", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).ChangeFolderName), varargs...)
}

// ChangeUserFirstName mocks base method.
func (m *MockDatabaseRepositoryClient) ChangeUserFirstName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserFirstName", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserFirstName indicates an expected call of ChangeUserFirstName.
func (mr *MockDatabaseRepositoryClientMockRecorder) ChangeUserFirstName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserFirstName", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).ChangeUserFirstName), varargs...)
}

// ChangeUserLastName mocks base method.
func (m *MockDatabaseRepositoryClient) ChangeUserLastName(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserLastName", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserLastName indicates an expected call of ChangeUserLastName.
func (mr *MockDatabaseRepositoryClientMockRecorder) ChangeUserLastName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserLastName", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).ChangeUserLastName), varargs...)
}

// ChangeUserPassword mocks base method.
func (m *MockDatabaseRepositoryClient) ChangeUserPassword(ctx context.Context, in *ChangeForm, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserPassword", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockDatabaseRepositoryClientMockRecorder) ChangeUserPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).ChangeUserPassword), varargs...)
}

// DeleteFolder mocks base method.
func (m *MockDatabaseRepositoryClient) DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFolder", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockDatabaseRepositoryClientMockRecorder) DeleteFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).DeleteFolder), varargs...)
}

// DeleteFolderMail mocks base method.
func (m *MockDatabaseRepositoryClient) DeleteFolderMail(ctx context.Context, in *DeleteFolderMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFolderMail", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolderMail indicates an expected call of DeleteFolderMail.
func (mr *MockDatabaseRepositoryClientMockRecorder) DeleteFolderMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolderMail", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).DeleteFolderMail), varargs...)
}

// DeleteMail mocks base method.
func (m *MockDatabaseRepositoryClient) DeleteMail(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMail", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMail indicates an expected call of DeleteMail.
func (mr *MockDatabaseRepositoryClientMockRecorder) DeleteMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMail", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).DeleteMail), varargs...)
}

// GetFolderById mocks base method.
func (m *MockDatabaseRepositoryClient) GetFolderById(ctx context.Context, in *GetFolderByIdRequest, opts ...grpc.CallOption) (*ResponseFolder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFolderById", varargs...)
	ret0, _ := ret[0].(*ResponseFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderById indicates an expected call of GetFolderById.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetFolderById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderById", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetFolderById), varargs...)
}

// GetFolderByName mocks base method.
func (m *MockDatabaseRepositoryClient) GetFolderByName(ctx context.Context, in *GetFolderByNameRequest, opts ...grpc.CallOption) (*ResponseFolder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFolderByName", varargs...)
	ret0, _ := ret[0].(*ResponseFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderByName indicates an expected call of GetFolderByName.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetFolderByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderByName", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetFolderByName), varargs...)
}

// GetFolderMail mocks base method.
func (m *MockDatabaseRepositoryClient) GetFolderMail(ctx context.Context, in *GetFolderMailRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFolderMail", varargs...)
	ret0, _ := ret[0].(*ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderMail indicates an expected call of GetFolderMail.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetFolderMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderMail", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetFolderMail), varargs...)
}

// GetFoldersByUser mocks base method.
func (m *MockDatabaseRepositoryClient) GetFoldersByUser(ctx context.Context, in *GetFoldersByUserRequest, opts ...grpc.CallOption) (*ResponseFolders, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFoldersByUser", varargs...)
	ret0, _ := ret[0].(*ResponseFolders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoldersByUser indicates an expected call of GetFoldersByUser.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetFoldersByUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersByUser", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetFoldersByUser), varargs...)
}

// GetIncomeMails mocks base method.
func (m *MockDatabaseRepositoryClient) GetIncomeMails(ctx context.Context, in *GetIncomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIncomeMails", varargs...)
	ret0, _ := ret[0].(*ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeMails indicates an expected call of GetIncomeMails.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetIncomeMails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeMails", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetIncomeMails), varargs...)
}

// GetMailInfoById mocks base method.
func (m *MockDatabaseRepositoryClient) GetMailInfoById(ctx context.Context, in *GetMailInfoByIdRequest, opts ...grpc.CallOption) (*ResponseMail, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMailInfoById", varargs...)
	ret0, _ := ret[0].(*ResponseMail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailInfoById indicates an expected call of GetMailInfoById.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetMailInfoById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailInfoById", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetMailInfoById), varargs...)
}

// GetOutcomeMails mocks base method.
func (m *MockDatabaseRepositoryClient) GetOutcomeMails(ctx context.Context, in *GetOutcomeMailsRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutcomeMails", varargs...)
	ret0, _ := ret[0].(*ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomeMails indicates an expected call of GetOutcomeMails.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetOutcomeMails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomeMails", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetOutcomeMails), varargs...)
}

// GetUserInfoById mocks base method.
func (m *MockDatabaseRepositoryClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserInfoById", varargs...)
	ret0, _ := ret[0].(*ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoById indicates an expected call of GetUserInfoById.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetUserInfoById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoById", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetUserInfoById), varargs...)
}

// GetUserInfoByUsername mocks base method.
func (m *MockDatabaseRepositoryClient) GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameRequest, opts ...grpc.CallOption) (*ResponseUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserInfoByUsername", varargs...)
	ret0, _ := ret[0].(*ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUsername indicates an expected call of GetUserInfoByUsername.
func (mr *MockDatabaseRepositoryClientMockRecorder) GetUserInfoByUsername(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUsername", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).GetUserInfoByUsername), varargs...)
}

// ReadMail mocks base method.
func (m *MockDatabaseRepositoryClient) ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMail", varargs...)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMail indicates an expected call of ReadMail.
func (mr *MockDatabaseRepositoryClientMockRecorder) ReadMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMail", reflect.TypeOf((*MockDatabaseRepositoryClient)(nil).ReadMail), varargs...)
}

// MockDatabaseRepositoryServer is a mock of DatabaseRepositoryServer interface.
type MockDatabaseRepositoryServer struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepositoryServerMockRecorder
}

// MockDatabaseRepositoryServerMockRecorder is the mock recorder for MockDatabaseRepositoryServer.
type MockDatabaseRepositoryServerMockRecorder struct {
	mock *MockDatabaseRepositoryServer
}

// NewMockDatabaseRepositoryServer creates a new mock instance.
func NewMockDatabaseRepositoryServer(ctrl *gomock.Controller) *MockDatabaseRepositoryServer {
	mock := &MockDatabaseRepositoryServer{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepositoryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepositoryServer) EXPECT() *MockDatabaseRepositoryServerMockRecorder {
	return m.recorder
}

// AddFolder mocks base method.
func (m *MockDatabaseRepositoryServer) AddFolder(arg0 context.Context, arg1 *AddFolderRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockDatabaseRepositoryServerMockRecorder) AddFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).AddFolder), arg0, arg1)
}

// AddMail mocks base method.
func (m *MockDatabaseRepositoryServer) AddMail(arg0 context.Context, arg1 *AddMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMail indicates an expected call of AddMail.
func (mr *MockDatabaseRepositoryServerMockRecorder) AddMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMail", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).AddMail), arg0, arg1)
}

// AddMailToFolder mocks base method.
func (m *MockDatabaseRepositoryServer) AddMailToFolder(arg0 context.Context, arg1 *AddMailToFolderRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMailToFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMailToFolder indicates an expected call of AddMailToFolder.
func (mr *MockDatabaseRepositoryServerMockRecorder) AddMailToFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMailToFolder", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).AddMailToFolder), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockDatabaseRepositoryServer) AddUser(arg0 context.Context, arg1 *AddUserRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseRepositoryServerMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).AddUser), arg0, arg1)
}

// ChangeFolderName mocks base method.
func (m *MockDatabaseRepositoryServer) ChangeFolderName(arg0 context.Context, arg1 *ChangeFolderNameRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFolderName", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeFolderName indicates an expected call of ChangeFolderName.
func (mr *MockDatabaseRepositoryServerMockRecorder) ChangeFolderName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFolderName", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).ChangeFolderName), arg0, arg1)
}

// ChangeUserFirstName mocks base method.
func (m *MockDatabaseRepositoryServer) ChangeUserFirstName(arg0 context.Context, arg1 *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserFirstName", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserFirstName indicates an expected call of ChangeUserFirstName.
func (mr *MockDatabaseRepositoryServerMockRecorder) ChangeUserFirstName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserFirstName", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).ChangeUserFirstName), arg0, arg1)
}

// ChangeUserLastName mocks base method.
func (m *MockDatabaseRepositoryServer) ChangeUserLastName(arg0 context.Context, arg1 *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserLastName", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserLastName indicates an expected call of ChangeUserLastName.
func (mr *MockDatabaseRepositoryServerMockRecorder) ChangeUserLastName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserLastName", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).ChangeUserLastName), arg0, arg1)
}

// ChangeUserPassword mocks base method.
func (m *MockDatabaseRepositoryServer) ChangeUserPassword(arg0 context.Context, arg1 *ChangeForm) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockDatabaseRepositoryServerMockRecorder) ChangeUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).ChangeUserPassword), arg0, arg1)
}

// DeleteFolder mocks base method.
func (m *MockDatabaseRepositoryServer) DeleteFolder(arg0 context.Context, arg1 *DeleteFolderRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockDatabaseRepositoryServerMockRecorder) DeleteFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).DeleteFolder), arg0, arg1)
}

// DeleteFolderMail mocks base method.
func (m *MockDatabaseRepositoryServer) DeleteFolderMail(arg0 context.Context, arg1 *DeleteFolderMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolderMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolderMail indicates an expected call of DeleteFolderMail.
func (mr *MockDatabaseRepositoryServerMockRecorder) DeleteFolderMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolderMail", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).DeleteFolderMail), arg0, arg1)
}

// DeleteMail mocks base method.
func (m *MockDatabaseRepositoryServer) DeleteMail(arg0 context.Context, arg1 *DeleteMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMail indicates an expected call of DeleteMail.
func (mr *MockDatabaseRepositoryServerMockRecorder) DeleteMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMail", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).DeleteMail), arg0, arg1)
}

// GetFolderById mocks base method.
func (m *MockDatabaseRepositoryServer) GetFolderById(arg0 context.Context, arg1 *GetFolderByIdRequest) (*ResponseFolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderById", arg0, arg1)
	ret0, _ := ret[0].(*ResponseFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderById indicates an expected call of GetFolderById.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetFolderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderById", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetFolderById), arg0, arg1)
}

// GetFolderByName mocks base method.
func (m *MockDatabaseRepositoryServer) GetFolderByName(arg0 context.Context, arg1 *GetFolderByNameRequest) (*ResponseFolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderByName", arg0, arg1)
	ret0, _ := ret[0].(*ResponseFolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderByName indicates an expected call of GetFolderByName.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetFolderByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderByName", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetFolderByName), arg0, arg1)
}

// GetFolderMail mocks base method.
func (m *MockDatabaseRepositoryServer) GetFolderMail(arg0 context.Context, arg1 *GetFolderMailRequest) (*ResponseMails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderMail", arg0, arg1)
	ret0, _ := ret[0].(*ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderMail indicates an expected call of GetFolderMail.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetFolderMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderMail", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetFolderMail), arg0, arg1)
}

// GetFoldersByUser mocks base method.
func (m *MockDatabaseRepositoryServer) GetFoldersByUser(arg0 context.Context, arg1 *GetFoldersByUserRequest) (*ResponseFolders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoldersByUser", arg0, arg1)
	ret0, _ := ret[0].(*ResponseFolders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoldersByUser indicates an expected call of GetFoldersByUser.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetFoldersByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersByUser", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetFoldersByUser), arg0, arg1)
}

// GetIncomeMails mocks base method.
func (m *MockDatabaseRepositoryServer) GetIncomeMails(arg0 context.Context, arg1 *GetIncomeMailsRequest) (*ResponseMails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeMails", arg0, arg1)
	ret0, _ := ret[0].(*ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeMails indicates an expected call of GetIncomeMails.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetIncomeMails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeMails", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetIncomeMails), arg0, arg1)
}

// GetMailInfoById mocks base method.
func (m *MockDatabaseRepositoryServer) GetMailInfoById(arg0 context.Context, arg1 *GetMailInfoByIdRequest) (*ResponseMail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailInfoById", arg0, arg1)
	ret0, _ := ret[0].(*ResponseMail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailInfoById indicates an expected call of GetMailInfoById.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetMailInfoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailInfoById", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetMailInfoById), arg0, arg1)
}

// GetOutcomeMails mocks base method.
func (m *MockDatabaseRepositoryServer) GetOutcomeMails(arg0 context.Context, arg1 *GetOutcomeMailsRequest) (*ResponseMails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutcomeMails", arg0, arg1)
	ret0, _ := ret[0].(*ResponseMails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomeMails indicates an expected call of GetOutcomeMails.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetOutcomeMails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomeMails", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetOutcomeMails), arg0, arg1)
}

// GetUserInfoById mocks base method.
func (m *MockDatabaseRepositoryServer) GetUserInfoById(arg0 context.Context, arg1 *GetUserInfoByIdRequest) (*ResponseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoById", arg0, arg1)
	ret0, _ := ret[0].(*ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoById indicates an expected call of GetUserInfoById.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetUserInfoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoById", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetUserInfoById), arg0, arg1)
}

// GetUserInfoByUsername mocks base method.
func (m *MockDatabaseRepositoryServer) GetUserInfoByUsername(arg0 context.Context, arg1 *GetUserInfoByUsernameRequest) (*ResponseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUsername", arg0, arg1)
	ret0, _ := ret[0].(*ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUsername indicates an expected call of GetUserInfoByUsername.
func (mr *MockDatabaseRepositoryServerMockRecorder) GetUserInfoByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUsername", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).GetUserInfoByUsername), arg0, arg1)
}

// ReadMail mocks base method.
func (m *MockDatabaseRepositoryServer) ReadMail(arg0 context.Context, arg1 *ReadMailRequest) (*utils_proto.DatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMail", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.DatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMail indicates an expected call of ReadMail.
func (mr *MockDatabaseRepositoryServerMockRecorder) ReadMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMail", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).ReadMail), arg0, arg1)
}

// mustEmbedUnimplementedDatabaseRepositoryServer mocks base method.
func (m *MockDatabaseRepositoryServer) mustEmbedUnimplementedDatabaseRepositoryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDatabaseRepositoryServer")
}

// mustEmbedUnimplementedDatabaseRepositoryServer indicates an expected call of mustEmbedUnimplementedDatabaseRepositoryServer.
func (mr *MockDatabaseRepositoryServerMockRecorder) mustEmbedUnimplementedDatabaseRepositoryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDatabaseRepositoryServer", reflect.TypeOf((*MockDatabaseRepositoryServer)(nil).mustEmbedUnimplementedDatabaseRepositoryServer))
}

// MockUnsafeDatabaseRepositoryServer is a mock of UnsafeDatabaseRepositoryServer interface.
type MockUnsafeDatabaseRepositoryServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDatabaseRepositoryServerMockRecorder
}

// MockUnsafeDatabaseRepositoryServerMockRecorder is the mock recorder for MockUnsafeDatabaseRepositoryServer.
type MockUnsafeDatabaseRepositoryServerMockRecorder struct {
	mock *MockUnsafeDatabaseRepositoryServer
}

// NewMockUnsafeDatabaseRepositoryServer creates a new mock instance.
func NewMockUnsafeDatabaseRepositoryServer(ctrl *gomock.Controller) *MockUnsafeDatabaseRepositoryServer {
	mock := &MockUnsafeDatabaseRepositoryServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDatabaseRepositoryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDatabaseRepositoryServer) EXPECT() *MockUnsafeDatabaseRepositoryServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDatabaseRepositoryServer mocks base method.
func (m *MockUnsafeDatabaseRepositoryServer) mustEmbedUnimplementedDatabaseRepositoryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDatabaseRepositoryServer")
}

// mustEmbedUnimplementedDatabaseRepositoryServer indicates an expected call of mustEmbedUnimplementedDatabaseRepositoryServer.
func (mr *MockUnsafeDatabaseRepositoryServerMockRecorder) mustEmbedUnimplementedDatabaseRepositoryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDatabaseRepositoryServer", reflect.TypeOf((*MockUnsafeDatabaseRepositoryServer)(nil).mustEmbedUnimplementedDatabaseRepositoryServer))
}
