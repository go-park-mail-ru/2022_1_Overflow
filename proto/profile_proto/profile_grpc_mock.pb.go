// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: proto/profile.proto

package profile_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	utils_proto "OverflowBackend/proto/utils_proto"
)

// MockProfileClient is a mock of ProfileClient interface.
type MockProfileClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileClientMockRecorder
}

// MockProfileClientMockRecorder is the mock recorder for MockProfileClient.
type MockProfileClientMockRecorder struct {
	mock *MockProfileClient
}

// NewMockProfileClient creates a new mock instance.
func NewMockProfileClient(ctrl *gomock.Controller) *MockProfileClient {
	mock := &MockProfileClient{ctrl: ctrl}
	mock.recorder = &MockProfileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileClient) EXPECT() *MockProfileClientMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockProfileClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockProfileClientMockRecorder) ChangePassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockProfileClient)(nil).ChangePassword), varargs...)
}

// GetAvatar mocks base method.
func (m *MockProfileClient) GetAvatar(ctx context.Context, in *GetAvatarRequest, opts ...grpc.CallOption) (*GetAvatarResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvatar", varargs...)
	ret0, _ := ret[0].(*GetAvatarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockProfileClientMockRecorder) GetAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockProfileClient)(nil).GetAvatar), varargs...)
}

// GetInfo mocks base method.
func (m *MockProfileClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInfo", varargs...)
	ret0, _ := ret[0].(*GetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockProfileClientMockRecorder) GetInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockProfileClient)(nil).GetInfo), varargs...)
}

// SetAvatar mocks base method.
func (m *MockProfileClient) SetAvatar(ctx context.Context, in *SetAvatarRequest, opts ...grpc.CallOption) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAvatar", varargs...)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAvatar indicates an expected call of SetAvatar.
func (mr *MockProfileClientMockRecorder) SetAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockProfileClient)(nil).SetAvatar), varargs...)
}

// SetInfo mocks base method.
func (m *MockProfileClient) SetInfo(ctx context.Context, in *SetInfoRequest, opts ...grpc.CallOption) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInfo", varargs...)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockProfileClientMockRecorder) SetInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockProfileClient)(nil).SetInfo), varargs...)
}

// MockProfileServer is a mock of ProfileServer interface.
type MockProfileServer struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServerMockRecorder
}

// MockProfileServerMockRecorder is the mock recorder for MockProfileServer.
type MockProfileServerMockRecorder struct {
	mock *MockProfileServer
}

// NewMockProfileServer creates a new mock instance.
func NewMockProfileServer(ctrl *gomock.Controller) *MockProfileServer {
	mock := &MockProfileServer{ctrl: ctrl}
	mock.recorder = &MockProfileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServer) EXPECT() *MockProfileServerMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockProfileServer) ChangePassword(arg0 context.Context, arg1 *ChangePasswordRequest) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockProfileServerMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockProfileServer)(nil).ChangePassword), arg0, arg1)
}

// GetAvatar mocks base method.
func (m *MockProfileServer) GetAvatar(arg0 context.Context, arg1 *GetAvatarRequest) (*GetAvatarResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", arg0, arg1)
	ret0, _ := ret[0].(*GetAvatarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockProfileServerMockRecorder) GetAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockProfileServer)(nil).GetAvatar), arg0, arg1)
}

// GetInfo mocks base method.
func (m *MockProfileServer) GetInfo(arg0 context.Context, arg1 *GetInfoRequest) (*GetInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0, arg1)
	ret0, _ := ret[0].(*GetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockProfileServerMockRecorder) GetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockProfileServer)(nil).GetInfo), arg0, arg1)
}

// SetAvatar mocks base method.
func (m *MockProfileServer) SetAvatar(arg0 context.Context, arg1 *SetAvatarRequest) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvatar", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAvatar indicates an expected call of SetAvatar.
func (mr *MockProfileServerMockRecorder) SetAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockProfileServer)(nil).SetAvatar), arg0, arg1)
}

// SetInfo mocks base method.
func (m *MockProfileServer) SetInfo(arg0 context.Context, arg1 *SetInfoRequest) (*utils_proto.JsonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInfo", arg0, arg1)
	ret0, _ := ret[0].(*utils_proto.JsonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockProfileServerMockRecorder) SetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockProfileServer)(nil).SetInfo), arg0, arg1)
}

// mustEmbedUnimplementedProfileServer mocks base method.
func (m *MockProfileServer) mustEmbedUnimplementedProfileServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServer")
}

// mustEmbedUnimplementedProfileServer indicates an expected call of mustEmbedUnimplementedProfileServer.
func (mr *MockProfileServerMockRecorder) mustEmbedUnimplementedProfileServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServer", reflect.TypeOf((*MockProfileServer)(nil).mustEmbedUnimplementedProfileServer))
}

// MockUnsafeProfileServer is a mock of UnsafeProfileServer interface.
type MockUnsafeProfileServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProfileServerMockRecorder
}

// MockUnsafeProfileServerMockRecorder is the mock recorder for MockUnsafeProfileServer.
type MockUnsafeProfileServerMockRecorder struct {
	mock *MockUnsafeProfileServer
}

// NewMockUnsafeProfileServer creates a new mock instance.
func NewMockUnsafeProfileServer(ctrl *gomock.Controller) *MockUnsafeProfileServer {
	mock := &MockUnsafeProfileServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProfileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProfileServer) EXPECT() *MockUnsafeProfileServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProfileServer mocks base method.
func (m *MockUnsafeProfileServer) mustEmbedUnimplementedProfileServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServer")
}

// mustEmbedUnimplementedProfileServer indicates an expected call of mustEmbedUnimplementedProfileServer.
func (mr *MockUnsafeProfileServerMockRecorder) mustEmbedUnimplementedProfileServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServer", reflect.TypeOf((*MockUnsafeProfileServer)(nil).mustEmbedUnimplementedProfileServer))
}
