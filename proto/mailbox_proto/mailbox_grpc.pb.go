// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/mailbox.proto

package mailbox_proto

import (
	utils_proto "OverflowBackend/proto/utils_proto"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailboxClient is the client API for Mailbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailboxClient interface {
	Income(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	Outcome(ctx context.Context, in *OutcomeRequest, opts ...grpc.CallOption) (*ResponseMails, error)
	GetMail(ctx context.Context, in *GetMailRequest, opts ...grpc.CallOption) (*ResponseMail, error)
	DeleteMail(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*utils_proto.JsonResponse, error)
	ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*utils_proto.JsonResponse, error)
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*utils_proto.JsonExtendResponse, error)
}

type mailboxClient struct {
	cc grpc.ClientConnInterface
}

func NewMailboxClient(cc grpc.ClientConnInterface) MailboxClient {
	return &mailboxClient{cc}
}

func (c *mailboxClient) Income(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/mailbox_proto.Mailbox/Income", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) Outcome(ctx context.Context, in *OutcomeRequest, opts ...grpc.CallOption) (*ResponseMails, error) {
	out := new(ResponseMails)
	err := c.cc.Invoke(ctx, "/mailbox_proto.Mailbox/Outcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) GetMail(ctx context.Context, in *GetMailRequest, opts ...grpc.CallOption) (*ResponseMail, error) {
	out := new(ResponseMail)
	err := c.cc.Invoke(ctx, "/mailbox_proto.Mailbox/GetMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) DeleteMail(ctx context.Context, in *DeleteMailRequest, opts ...grpc.CallOption) (*utils_proto.JsonResponse, error) {
	out := new(utils_proto.JsonResponse)
	err := c.cc.Invoke(ctx, "/mailbox_proto.Mailbox/DeleteMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*utils_proto.JsonResponse, error) {
	out := new(utils_proto.JsonResponse)
	err := c.cc.Invoke(ctx, "/mailbox_proto.Mailbox/ReadMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*utils_proto.JsonExtendResponse, error) {
	out := new(utils_proto.JsonExtendResponse)
	err := c.cc.Invoke(ctx, "/mailbox_proto.Mailbox/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailboxServer is the server API for Mailbox service.
// All implementations must embed UnimplementedMailboxServer
// for forward compatibility
type MailboxServer interface {
	Income(context.Context, *IncomeRequest) (*ResponseMails, error)
	Outcome(context.Context, *OutcomeRequest) (*ResponseMails, error)
	GetMail(context.Context, *GetMailRequest) (*ResponseMail, error)
	DeleteMail(context.Context, *DeleteMailRequest) (*utils_proto.JsonResponse, error)
	ReadMail(context.Context, *ReadMailRequest) (*utils_proto.JsonResponse, error)
	SendMail(context.Context, *SendMailRequest) (*utils_proto.JsonExtendResponse, error)
}

// UnimplementedMailboxServer must be embedded to have forward compatible implementations.
type UnimplementedMailboxServer struct {
}

func (UnimplementedMailboxServer) Income(context.Context, *IncomeRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Income not implemented")
}
func (UnimplementedMailboxServer) Outcome(context.Context, *OutcomeRequest) (*ResponseMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Outcome not implemented")
}
func (UnimplementedMailboxServer) GetMail(context.Context, *GetMailRequest) (*ResponseMail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMail not implemented")
}
func (UnimplementedMailboxServer) DeleteMail(context.Context, *DeleteMailRequest) (*utils_proto.JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMail not implemented")
}
func (UnimplementedMailboxServer) ReadMail(context.Context, *ReadMailRequest) (*utils_proto.JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMail not implemented")
}
func (UnimplementedMailboxServer) SendMail(context.Context, *SendMailRequest) (*utils_proto.JsonExtendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedMailboxServer) mustEmbedUnimplementedMailboxServer() {}

// UnsafeMailboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailboxServer will
// result in compilation errors.
type UnsafeMailboxServer interface {
	mustEmbedUnimplementedMailboxServer()
}

func RegisterMailboxServer(s grpc.ServiceRegistrar, srv MailboxServer) {
	s.RegisterService(&Mailbox_ServiceDesc, srv)
}

func _Mailbox_Income_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).Income(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox_proto.Mailbox/Income",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).Income(ctx, req.(*IncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_Outcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).Outcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox_proto.Mailbox/Outcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).Outcome(ctx, req.(*OutcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_GetMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).GetMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox_proto.Mailbox/GetMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).GetMail(ctx, req.(*GetMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_DeleteMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).DeleteMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox_proto.Mailbox/DeleteMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).DeleteMail(ctx, req.(*DeleteMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_ReadMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).ReadMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox_proto.Mailbox/ReadMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).ReadMail(ctx, req.(*ReadMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox_proto.Mailbox/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mailbox_ServiceDesc is the grpc.ServiceDesc for Mailbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mailbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mailbox_proto.Mailbox",
	HandlerType: (*MailboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Income",
			Handler:    _Mailbox_Income_Handler,
		},
		{
			MethodName: "Outcome",
			Handler:    _Mailbox_Outcome_Handler,
		},
		{
			MethodName: "GetMail",
			Handler:    _Mailbox_GetMail_Handler,
		},
		{
			MethodName: "DeleteMail",
			Handler:    _Mailbox_DeleteMail_Handler,
		},
		{
			MethodName: "ReadMail",
			Handler:    _Mailbox_ReadMail_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _Mailbox_SendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mailbox.proto",
}
