// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7feca409DecodeOverflowBackendInternalModels(in *jlexer.Lexer, out *MailList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int(in.Int())
		case "mails":
			if in.IsNull() {
				in.Skip()
				out.Mails = nil
			} else {
				in.Delim('[')
				if out.Mails == nil {
					if !in.IsDelim(']') {
						out.Mails = make([]Mail, 0, 0)
					} else {
						out.Mails = []Mail{}
					}
				} else {
					out.Mails = (out.Mails)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Mail
					(v1).UnmarshalEasyJSON(in)
					out.Mails = append(out.Mails, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels(out *jwriter.Writer, in MailList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"mails\":"
		out.RawString(prefix)
		if in.Mails == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Mails {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels(l, v)
}
func easyjson7feca409DecodeOverflowBackendInternalModels1(in *jlexer.Lexer, out *MailAdditional) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mail":
			(out.Mail).UnmarshalEasyJSON(in)
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels1(out *jwriter.Writer, in MailAdditional) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mail\":"
		out.RawString(prefix[1:])
		(in.Mail).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailAdditional) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailAdditional) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailAdditional) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailAdditional) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels1(l, v)
}
func easyjson7feca409DecodeOverflowBackendInternalModels2(in *jlexer.Lexer, out *MailAddList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int(in.Int())
		case "mails":
			if in.IsNull() {
				in.Skip()
				out.Mails = nil
			} else {
				in.Delim('[')
				if out.Mails == nil {
					if !in.IsDelim(']') {
						out.Mails = make([]MailAdditional, 0, 0)
					} else {
						out.Mails = []MailAdditional{}
					}
				} else {
					out.Mails = (out.Mails)[:0]
				}
				for !in.IsDelim(']') {
					var v4 MailAdditional
					(v4).UnmarshalEasyJSON(in)
					out.Mails = append(out.Mails, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels2(out *jwriter.Writer, in MailAddList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"mails\":"
		out.RawString(prefix)
		if in.Mails == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Mails {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailAddList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailAddList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailAddList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailAddList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels2(l, v)
}
func easyjson7feca409DecodeOverflowBackendInternalModels3(in *jlexer.Lexer, out *Mail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "sender":
			out.Sender = string(in.String())
		case "addressee":
			out.Addressee = string(in.String())
		case "theme":
			out.Theme = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "files":
			out.Files = string(in.String())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "read":
			out.Read = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels3(out *jwriter.Writer, in Mail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix)
		out.String(string(in.Sender))
	}
	{
		const prefix string = ",\"addressee\":"
		out.RawString(prefix)
		out.String(string(in.Addressee))
	}
	{
		const prefix string = ",\"theme\":"
		out.RawString(prefix)
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		out.String(string(in.Files))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels3(l, v)
}
func easyjson7feca409DecodeOverflowBackendInternalModels4(in *jlexer.Lexer, out *CountUnread) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels4(out *jwriter.Writer, in CountUnread) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountUnread) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountUnread) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountUnread) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountUnread) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels4(l, v)
}
func easyjson7feca409DecodeOverflowBackendInternalModels5(in *jlexer.Lexer, out *AttachShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels5(out *jwriter.Writer, in AttachShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttachShort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttachShort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttachShort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttachShort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels5(l, v)
}
func easyjson7feca409DecodeOverflowBackendInternalModels6(in *jlexer.Lexer, out *AttachList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attaches":
			if in.IsNull() {
				in.Skip()
				out.Attaches = nil
			} else {
				in.Delim('[')
				if out.Attaches == nil {
					if !in.IsDelim(']') {
						out.Attaches = make([]AttachShort, 0, 2)
					} else {
						out.Attaches = []AttachShort{}
					}
				} else {
					out.Attaches = (out.Attaches)[:0]
				}
				for !in.IsDelim(']') {
					var v7 AttachShort
					(v7).UnmarshalEasyJSON(in)
					out.Attaches = append(out.Attaches, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels6(out *jwriter.Writer, in AttachList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"attaches\":"
		out.RawString(prefix[1:])
		if in.Attaches == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attaches {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttachList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttachList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttachList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttachList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels6(l, v)
}
func easyjson7feca409DecodeOverflowBackendInternalModels7(in *jlexer.Lexer, out *Attach) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "payload_size":
			out.PayloadSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409EncodeOverflowBackendInternalModels7(out *jwriter.Writer, in Attach) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	{
		const prefix string = ",\"payload_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.PayloadSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attach) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409EncodeOverflowBackendInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attach) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409EncodeOverflowBackendInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attach) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409DecodeOverflowBackendInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attach) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409DecodeOverflowBackendInternalModels7(l, v)
}
