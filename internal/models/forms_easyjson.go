// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson84463b63DecodeOverflowBackendInternalModels(in *jlexer.Lexer, out *SignUpForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.Firstname = string(in.String())
		case "last_name":
			out.Lastname = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "password_confirmation":
			out.PasswordConfirmation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels(out *jwriter.Writer, in SignUpForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Firstname))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.Lastname))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"password_confirmation\":"
		out.RawString(prefix)
		out.String(string(in.PasswordConfirmation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignUpForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignUpForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignUpForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignUpForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels1(in *jlexer.Lexer, out *SignInForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels1(out *jwriter.Writer, in SignInForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignInForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignInForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignInForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignInForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels1(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels2(in *jlexer.Lexer, out *ReadMailForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "isread":
			out.IsRead = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels2(out *jwriter.Writer, in ReadMailForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"isread\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadMailForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadMailForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadMailForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadMailForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels2(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels3(in *jlexer.Lexer, out *ProfileSettingsForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.Firstname = string(in.String())
		case "last_name":
			out.Lastname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels3(out *jwriter.Writer, in ProfileSettingsForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Firstname))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.Lastname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileSettingsForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileSettingsForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileSettingsForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileSettingsForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels3(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels4(in *jlexer.Lexer, out *MoveFolderMailForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "folder_name_src":
			out.FolderNameSrc = string(in.String())
		case "folder_name_dest":
			out.FolderNameDest = string(in.String())
		case "mail_id":
			out.MailId = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels4(out *jwriter.Writer, in MoveFolderMailForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"folder_name_src\":"
		out.RawString(prefix[1:])
		out.String(string(in.FolderNameSrc))
	}
	{
		const prefix string = ",\"folder_name_dest\":"
		out.RawString(prefix)
		out.String(string(in.FolderNameDest))
	}
	{
		const prefix string = ",\"mail_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.MailId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MoveFolderMailForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MoveFolderMailForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MoveFolderMailForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MoveFolderMailForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels4(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels5(in *jlexer.Lexer, out *MailForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressee":
			out.Addressee = string(in.String())
		case "theme":
			out.Theme = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "files":
			out.Files = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels5(out *jwriter.Writer, in MailForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressee\":"
		out.RawString(prefix[1:])
		out.String(string(in.Addressee))
	}
	{
		const prefix string = ",\"theme\":"
		out.RawString(prefix)
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		out.String(string(in.Files))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels5(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels6(in *jlexer.Lexer, out *GetListAttachForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mail_id":
			out.MailID = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels6(out *jwriter.Writer, in GetListAttachForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mail_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.MailID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetListAttachForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetListAttachForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetListAttachForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetListAttachForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels6(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels7(in *jlexer.Lexer, out *GetAttachForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mail_id":
			out.MailID = int32(in.Int32())
		case "attach_id":
			out.AttachID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels7(out *jwriter.Writer, in GetAttachForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mail_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.MailID))
	}
	{
		const prefix string = ",\"attach_id\":"
		out.RawString(prefix)
		out.String(string(in.AttachID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAttachForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAttachForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAttachForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAttachForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels7(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels8(in *jlexer.Lexer, out *DeleteMailForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels8(out *jwriter.Writer, in DeleteMailForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteMailForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteMailForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteMailForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteMailForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels8(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels9(in *jlexer.Lexer, out *DeleteFolderMailForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "folder_name":
			out.FolderName = string(in.String())
		case "mail_id":
			out.MailId = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels9(out *jwriter.Writer, in DeleteFolderMailForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FolderName))
	}
	{
		const prefix string = ",\"mail_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.MailId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteFolderMailForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteFolderMailForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteFolderMailForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteFolderMailForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels9(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels10(in *jlexer.Lexer, out *DeleteFolderForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "folder_name":
			out.FolderName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels10(out *jwriter.Writer, in DeleteFolderForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FolderName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteFolderForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteFolderForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteFolderForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteFolderForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels10(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels11(in *jlexer.Lexer, out *ChangePasswordForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "password_old":
			out.OldPassword = string(in.String())
		case "password_new":
			out.NewPassword = string(in.String())
		case "password_new_confirmation":
			out.NewPasswordConf = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels11(out *jwriter.Writer, in ChangePasswordForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"password_old\":"
		out.RawString(prefix[1:])
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"password_new\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	{
		const prefix string = ",\"password_new_confirmation\":"
		out.RawString(prefix)
		out.String(string(in.NewPasswordConf))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangePasswordForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangePasswordForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangePasswordForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangePasswordForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels11(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels12(in *jlexer.Lexer, out *ChangeFolderForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "folder_name":
			out.FolderName = string(in.String())
		case "new_folder_name":
			out.NewFolderName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels12(out *jwriter.Writer, in ChangeFolderForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FolderName))
	}
	{
		const prefix string = ",\"new_folder_name\":"
		out.RawString(prefix)
		out.String(string(in.NewFolderName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeFolderForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeFolderForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeFolderForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeFolderForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels12(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels13(in *jlexer.Lexer, out *AddMailToFolderByObjectForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "folder_name":
			out.FolderName = string(in.String())
		case "form":
			(out.Mail).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels13(out *jwriter.Writer, in AddMailToFolderByObjectForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FolderName))
	}
	{
		const prefix string = ",\"form\":"
		out.RawString(prefix)
		(in.Mail).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddMailToFolderByObjectForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddMailToFolderByObjectForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddMailToFolderByObjectForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddMailToFolderByObjectForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels13(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels14(in *jlexer.Lexer, out *AddMailToFolderByIdForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "folder_name":
			out.FolderName = string(in.String())
		case "mail_id":
			out.MailId = int32(in.Int32())
		case "move":
			out.Move = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels14(out *jwriter.Writer, in AddMailToFolderByIdForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FolderName))
	}
	{
		const prefix string = ",\"mail_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.MailId))
	}
	{
		const prefix string = ",\"move\":"
		out.RawString(prefix)
		out.Bool(bool(in.Move))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddMailToFolderByIdForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddMailToFolderByIdForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddMailToFolderByIdForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddMailToFolderByIdForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels14(l, v)
}
func easyjson84463b63DecodeOverflowBackendInternalModels15(in *jlexer.Lexer, out *AddFolderForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "folder_name":
			out.FolderName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84463b63EncodeOverflowBackendInternalModels15(out *jwriter.Writer, in AddFolderForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"folder_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FolderName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddFolderForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84463b63EncodeOverflowBackendInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddFolderForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84463b63EncodeOverflowBackendInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddFolderForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84463b63DecodeOverflowBackendInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddFolderForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84463b63DecodeOverflowBackendInternalModels15(l, v)
}
